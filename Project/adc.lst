
AVRASM ver. 2.1.2  adc.asm Sun Jun 26 01:03:21 2011

adc.asm(992): Including file 'adc.vec'
adc.asm(993): Including file 'adc.inc'
adc.inc(2): warning: Register r2 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(3): warning: Register r4 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(4): warning: Register r5 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(5): warning: Register r6 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(6): warning: Register r7 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(7): warning: Register r8 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(8): warning: Register r9 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(9): warning: Register r10 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(10): warning: Register r11 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(11): warning: Register r12 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(12): warning: Register r13 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
adc.inc(13): warning: Register r14 already defined by the .DEF directive
adc.asm(993): 'adc.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.24.8d Professional
                 ;(C) Copyright 1998-2006 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega48
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega48
                 	#pragma AVRPART MEMORY PROG_FLASH 4096
                 	#pragma AVRPART MEMORY EEPROM 256
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 	.EQU GPIOR1=0x2A
                 	.EQU GPIOR2=0x2B
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "adc.vec"
                 
                 ;INTERRUPT VECTORS
000000 c0d4      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 c0fb      	RJMP _usart_rx_isr
000013 cfec      	RJMP 0x00
000014 c136      	RJMP _usart_tx_isr
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 	.INCLUDE "adc.inc"
                 
                 	.DEF _timer_count=R2
                 	.DEF _i=R4
                 	.DEF _j=R5
                 	.DEF _k=R6
                 	.DEF _rx_wr_index0=R7
                 	.DEF _rx_rd_index0=R8
                 	.DEF _rx_counter0=R9
                 	.DEF _tx_wr_index0=R10
                 	.DEF _tx_rd_index0=R11
                 	.DEF _tx_counter0=R12
                 	.DEF _data=R13
                 	.DEF _stop=R14
                 _tbl10_G5:
00001a 2710
00001b 03e8
00001c 0064
00001d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00001e 0001      	.DB  0x1,0x0
                 _tbl16_G5:
00001f 1000
000020 0100
000021 0010
000022 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 _0:
000023 5047
000024 4c47
000025 2c4c
000026 2c00      	.DB  0x47,0x50,0x47,0x4C,0x4C,0x2C,0x0,0x2C
000027 2c4e
000028 0030
000029 3041
00002a 3130      	.DB  0x4E,0x2C,0x30,0x0,0x41,0x30,0x30,0x31
00002b 3039
00002c 3444
00002d 3634
00002e 0041      	.DB  0x39,0x30,0x44,0x34,0x34,0x36,0x41,0x0
00002f 3041
000030 3130
000031 4139
000032 4344      	.DB  0x41,0x30,0x30,0x31,0x39,0x41,0x44,0x43
000033 3443
000034 0032
000035 3041
000036 3130      	.DB  0x43,0x34,0x32,0x0,0x41,0x30,0x30,0x31
000037 4238
000038 4246
000039 3231
00003a 0043      	.DB  0x38,0x42,0x46,0x42,0x31,0x32,0x43,0x0
00003b 3041
00003c 3130
00003d 3039
00003e 3741      	.DB  0x41,0x30,0x30,0x31,0x39,0x30,0x41,0x37
00003f 3530
000040 0039
000041 7069
000042 2000      	.DB  0x30,0x35,0x39,0x0,0x69,0x70,0x0,0x20
000043 6552
000044 6461
000045 6e69
000046 2067      	.DB  0x52,0x65,0x61,0x64,0x69,0x6E,0x67,0x20
000047 5049
000048 7720
000049 6961
00004a 0074      	.DB  0x49,0x50,0x20,0x77,0x61,0x69,0x74,0x0
00004b 6152
00004c 7568
00004d 006c
00004e 6953      	.DB  0x52,0x61,0x68,0x75,0x6C,0x0,0x53,0x69
00004f 6464
000050 7261
000051 6874
000052 4e00      	.DB  0x64,0x64,0x61,0x72,0x74,0x68,0x0,0x4E
000053 6b69
000054 6968
000055 006c
000056 7553      	.DB  0x69,0x6B,0x68,0x69,0x6C,0x0,0x53,0x75
000057 6572
000058 6873
000059 5200
00005a 6d61      	.DB  0x72,0x65,0x73,0x68,0x0,0x52,0x61,0x6D
00005b 7365
00005c 0068
00005d 7753
00005e 7069      	.DB  0x65,0x73,0x68,0x0,0x53,0x77,0x69,0x70
00005f 2065
000060 7255
000061 4320
000062 7261      	.DB  0x65,0x20,0x55,0x72,0x20,0x43,0x61,0x72
000063 0064
000064 6e49
000065 6176
000066 696c      	.DB  0x64,0x0,0x49,0x6E,0x76,0x61,0x6C,0x69
000067 0064
000068 7461
000069 0d20
00006a 6100      	.DB  0x64,0x0,0x61,0x74,0x20,0xD,0x0,0x61
00006b 2b74
00006c 6d63
00006d 6667
00006e 313d      	.DB  0x74,0x2B,0x63,0x6D,0x67,0x66,0x3D,0x31
00006f 000d
000070 7461
000071 632b
000072 7566      	.DB  0xD,0x0,0x61,0x74,0x2B,0x63,0x66,0x75
000073 3d6e
000074 0d31
000075 6100
000076 2b74      	.DB  0x6E,0x3D,0x31,0xD,0x0,0x61,0x74,0x2B
000077 6d63
000078 7367
000079 003d
00007a 3239      	.DB  0x63,0x6D,0x67,0x73,0x3D,0x0,0x39,0x32
00007b 3234
00007c 3338
00007d 3738
00007e 3631      	.DB  0x34,0x32,0x38,0x33,0x38,0x37,0x31,0x36
00007f 4000
000080 544c
000081 4c00
000082 0047      	.DB  0x0,0x40,0x4C,0x54,0x0,0x4C,0x47,0x0
000083 5441
000084 000d
000085 5441
000086 432b      	.DB  0x41,0x54,0xD,0x0,0x41,0x54,0x2B,0x43
000087 474d
000088 3d46
000089 0d31
00008a 4100      	.DB  0x4D,0x47,0x46,0x3D,0x31,0xD,0x0,0x41
00008b 2b54
00008c 4943
00008d 5350
00008e 4e45      	.DB  0x54,0x2B,0x43,0x49,0x50,0x53,0x45,0x4E
00008f 0044
000090 5441
000091 4100
000092 2b54      	.DB  0x44,0x0,0x41,0x54,0x0,0x41,0x54,0x2B
000093 4d43
000094 4647
000095 313d
000096 4100      	.DB  0x43,0x4D,0x47,0x46,0x3D,0x31,0x0,0x41
000097 2b54
000098 4943
000099 5350
00009a 5245      	.DB  0x54,0x2B,0x43,0x49,0x50,0x53,0x45,0x52
00009b 4556
00009c 3d52
00009d 2c31
00009e 3231      	.DB  0x56,0x45,0x52,0x3D,0x31,0x2C,0x31,0x32
00009f 3433
0000a0 0a00
0000a1 000d
0000a2 7461      	.DB  0x33,0x34,0x0,0xA,0xD,0x0,0x61,0x74
0000a3 632b
0000a4 6669
0000a5 7273
adc.inc(52): warning: .cseg .db misalignment - padding zero byte
adc.asm(993): 'adc.inc' included form here
0000a6 0000      	.DB  0x2B,0x63,0x69,0x66,0x73,0x72,0x0
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 	.EQU  __GPIOR1_INIT=0x00
                 	.EQU  __GPIOR2_INIT=0x00
                 
                 __GLOBAL_INI_TBL:
0000a7 0007      	.DW  0x07
0000a8 0190      	.DW  _cmd1
0000a9 0046      	.DW  _0*2
                 
0000aa 0005      	.DW  0x05
0000ab 0197      	.DW  _cmd2
0000ac 004d      	.DW  _0*2+0x07
                 
0000ad 000c      	.DW  0x0C
0000ae 019c      	.DW  _cmd3
0000af 0052      	.DW  _0*2+0x0C
                 
0000b0 000c      	.DW  0x0C
0000b1 01a8      	.DW  _cmd4
0000b2 005e      	.DW  _0*2+0x18
                 
0000b3 000c      	.DW  0x0C
0000b4 01b4      	.DW  _cmd5
0000b5 006a      	.DW  _0*2+0x24
                 
0000b6 000c      	.DW  0x0C
0000b7 01c0      	.DW  _cmd6
0000b8 0076      	.DW  _0*2+0x30
                 
0000b9 0003      	.DW  0x03
0000ba 01de      	.DW  _msg4
0000bb 0082      	.DW  _0*2+0x3C
                 
0000bc 0011      	.DW  0x11
0000bd 01f1      	.DW  _ipi
0000be 0085      	.DW  _0*2+0x3F
                 
0000bf 0006      	.DW  0x06
0000c0 0202      	.DW  _cmd7
0000c1 0096      	.DW  _0*2+0x50
                 
0000c2 0009      	.DW  0x09
0000c3 0208      	.DW  _cmd8
0000c4 009c      	.DW  _0*2+0x56
                 
0000c5 0007      	.DW  0x07
0000c6 0211      	.DW  _cmd9
0000c7 00a5      	.DW  _0*2+0x5F
                 
0000c8 0007      	.DW  0x07
0000c9 0218      	.DW  _cmd10
0000ca 00ac      	.DW  _0*2+0x66
                 
0000cb 0007      	.DW  0x07
0000cc 021f      	.DW  _cmd11
0000cd 00b3      	.DW  _0*2+0x6D
                 
0000ce 000e      	.DW  0x0E
0000cf 0226      	.DW  _cmd12
0000d0 00ba      	.DW  _0*2+0x74
                 
0000d1 0008      	.DW  0x08
0000d2 0234      	.DW  _cmd13
0000d3 00c8      	.DW  _0*2+0x82
                 
0000d4 0000      	.DW  0
                 _0xB1:
                 
                 __RESET:
0000d5 94f8      	CLI
0000d6 27ee      	CLR  R30
0000d7 bbef      	OUT  EECR,R30
0000d8 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000d9 e1f8      	LDI  R31,0x18
0000da 95a8      	WDR
0000db b7a4      	IN   R26,MCUSR
0000dc 7fa7      	CBR  R26,8
0000dd bfa4      	OUT  MCUSR,R26
0000de 93f0 0060 	STS  WDTCSR,R31
0000e0 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
0000e2 e08d      	LDI  R24,13
0000e3 e0a2      	LDI  R26,2
0000e4 27bb      	CLR  R27
                 __CLEAR_REG:
0000e5 93ed      	ST   X+,R30
0000e6 958a      	DEC  R24
0000e7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000e8 e080      	LDI  R24,LOW(0x200)
0000e9 e092      	LDI  R25,HIGH(0x200)
0000ea e0a0      	LDI  R26,LOW(0x100)
0000eb e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
0000ec 93ed      	ST   X+,R30
0000ed 9701      	SBIW R24,1
0000ee f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ef e4ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000f0 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000f1 9185      	LPM  R24,Z+
0000f2 9195      	LPM  R25,Z+
0000f3 9700      	SBIW R24,0
0000f4 f061      	BREQ __GLOBAL_INI_END
0000f5 91a5      	LPM  R26,Z+
0000f6 91b5      	LPM  R27,Z+
0000f7 9005      	LPM  R0,Z+
0000f8 9015      	LPM  R1,Z+
0000f9 01bf      	MOVW R22,R30
0000fa 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000fb 9005      	LPM  R0,Z+
0000fc 920d      	ST   X+,R0
0000fd 9701      	SBIW R24,1
0000fe f7e1      	BRNE __GLOBAL_INI_LOOP
0000ff 01fb      	MOVW R30,R22
000100 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000101 e0e0      	LDI  R30,__GPIOR0_INIT
000102 bbee      	OUT  GPIOR0,R30
000103 e0e0      	LDI  R30,__GPIOR1_INIT
000104 bdea      	OUT  GPIOR1,R30
000105 e0e0      	LDI  R30,__GPIOR2_INIT
000106 bdeb      	OUT  GPIOR2,R30
                 
                 ;STACK POINTER INITIALIZATION
000107 efef      	LDI  R30,LOW(0x2FF)
000108 bfed      	OUT  SPL,R30
000109 e0e2      	LDI  R30,HIGH(0x2FF)
00010a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00010b e8c0      	LDI  R28,LOW(0x180)
00010c e0d1      	LDI  R29,HIGH(0x180)
                 
00010d c07a      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x180
                 ;       1 #include <mega48.h>
                 ;       2  #include <lcd16x1.h> 
                 ;       3  #include<delay.h>
                 ;       4  #include<stdlib.h>
                 ;       5  #include<string.h>
                 ;       6 #define RXB8 1
                 ;       7 #define TXB8 0
                 ;       8 #define UPE 2
                 ;       9 #define OVR 3
                 ;      10 #define FE 4
                 ;      11 #define UDRE 5
                 ;      12 #define RXC 7
                 ;      13 void gps(void);  
                 ;      14 void send_cmd(void);
                 ;      15 void latch_cmd(void);
                 ;      16 void gprs(void);
                 ;      17 
                 ;      18 #define FRAMING_ERROR (1<<FE)
                 ;      19 #define PARITY_ERROR (1<<UPE)
                 ;      20 #define DATA_OVERRUN (1<<OVR)
                 ;      21 #define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;      22 #define RX_COMPLETE (1<<RXC) 
                 ;      23 unsigned int timer_count;
                 ;      24 unsigned char i;   
                 ;      25 unsigned char j;      
                 ;      26 unsigned char k;
                 ;      27 
                 ;      28 
                 ;      29 // USART Receiver buffer
                 ;      30 #define RX_BUFFER_SIZE0 8
                 ;      31 char rx_buffer0[RX_BUFFER_SIZE0];
                 _rx_buffer0:
000180           	.BYTE 0x8
                 ;      32 
                 ;      33 #if RX_BUFFER_SIZE0<256
                 ;      34 unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      35 #else
                 ;      36 unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;      37 #endif
                 ;      38 
                 ;      39 // This flag is set on USART Receiver buffer overflow
                 ;      40 bit rx_buffer_overflow0;
                 ;      41 
                 ;      42 // USART Receiver interrupt service routine
                 ;      43 interrupt [USART_RXC] void usart_rx_isr(void)
                 ;      44 {
                 
                 	.CSEG
                 _usart_rx_isr:
00010e 93aa      	ST   -Y,R26
00010f 93ba      	ST   -Y,R27
000110 93ea      	ST   -Y,R30
000111 b7ef      	IN   R30,SREG
000112 93ea      	ST   -Y,R30
                 ;      45 char status,data;
                 ;      46 status=UCSR0A;
000113 d4c9      	RCALL __SAVELOCR2
                 ;	status -> R16
                 ;	data -> R17
000114 9100 00c0 	LDS  R16,192
                 ;      47 data=UDR0;
000116 9110 00c6 	LDS  R17,198
                 ;      48 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000118 2fe0      	MOV  R30,R16
000119 71ec      	ANDI R30,LOW(0x1C)
00011a f009      	BREQ PC+2
00011b c012      	RJMP _0x3
                 ;      49    {
                 ;      50    rx_buffer0[rx_wr_index0]=data;
00011c 2da7      	MOV  R26,R7
00011d e0b0      	LDI  R27,0
00011e 58a0      	SUBI R26,LOW(-_rx_buffer0)
00011f 4fbe      	SBCI R27,HIGH(-_rx_buffer0)
000120 931c      	ST   X,R17
                 ;      51    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000121 9473      	INC  R7
000122 e0e8      	LDI  R30,LOW(8)
000123 15e7      	CP   R30,R7
000124 f009      	BREQ PC+2
000125 c001      	RJMP _0x4
000126 2477      	CLR  R7
                 ;      52    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x4:
000127 9493      	INC  R9
000128 e0e8      	LDI  R30,LOW(8)
000129 15e9      	CP   R30,R9
00012a f009      	BREQ PC+2
00012b c002      	RJMP _0x5
                 ;      53       {
                 ;      54       rx_counter0=0;
00012c 2499      	CLR  R9
                 ;      55       rx_buffer_overflow0=1;
00012d 9af0      	SBI  0x1E,0
                 ;      56       };
                 _0x5:
                 ;      57    };
                 _0x3:
                 ;      58 }
00012e d4b8      	RCALL __LOADLOCR2P
00012f 91e9      	LD   R30,Y+
000130 bfef      	OUT  SREG,R30
000131 91e9      	LD   R30,Y+
000132 91b9      	LD   R27,Y+
000133 91a9      	LD   R26,Y+
000134 9518      	RETI
                 ;      59 
                 ;      60 #ifndef _DEBUG_TERMINAL_IO_
                 ;      61 // Get a character from the USART Receiver buffer
                 ;      62 #define _ALTERNATE_GETCHAR_
                 ;      63 #pragma used+
                 ;      64 char getchar(void)
                 ;      65 {
                 _getchar:
                 ;      66 char data;
                 ;      67 while (rx_counter0==0);
000135 930a      	ST   -Y,R16
                 ;	data -> R16
                 _0x6:
000136 2099      	TST  R9
000137 f009      	BREQ PC+2
000138 c001      	RJMP _0x8
000139 cffc      	RJMP _0x6
                 _0x8:
                 ;      68 data=rx_buffer0[rx_rd_index0];
00013a 2de8      	MOV  R30,R8
00013b d3c4      	RCALL SUBOPT_0x0
00013c 58e0      	SUBI R30,LOW(-_rx_buffer0)
00013d 4ffe      	SBCI R31,HIGH(-_rx_buffer0)
00013e 8100      	LD   R16,Z
                 ;      69 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
00013f 9483      	INC  R8
000140 e0e8      	LDI  R30,LOW(8)
000141 15e8      	CP   R30,R8
000142 f009      	BREQ PC+2
000143 c001      	RJMP _0x9
000144 2488      	CLR  R8
                 ;      70 #asm("cli")
                 _0x9:
000145 94f8      	cli
                 ;      71 --rx_counter0;
000146 949a      	DEC  R9
                 ;      72 #asm("sei")
000147 9478      	sei
                 ;      73 return data;
000148 2fe0      	MOV  R30,R16
000149 9109      	LD   R16,Y+
00014a 9508      	RET
                 ;      74 }
                 ;      75 #pragma used-
                 ;      76 #endif
                 ;      77 
                 ;      78 // USART Transmitter buffer
                 ;      79 #define TX_BUFFER_SIZE0 8
                 ;      80 char tx_buffer0[TX_BUFFER_SIZE0];
                 
                 	.DSEG
                 _tx_buffer0:
000188           	.BYTE 0x8
                 ;      81 
                 ;      82 #if TX_BUFFER_SIZE0<256
                 ;      83 unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;      84 #else
                 ;      85 unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;      86 #endif
                 ;      87 
                 ;      88 // USART Transmitter interrupt service routine
                 ;      89 interrupt [USART_TXC] void usart_tx_isr(void)
                 ;      90 {
                 
                 	.CSEG
                 _usart_tx_isr:
00014b 93ea      	ST   -Y,R30
00014c 93fa      	ST   -Y,R31
00014d b7ef      	IN   R30,SREG
00014e 93ea      	ST   -Y,R30
                 ;      91 if (tx_counter0)
00014f 20cc      	TST  R12
000150 f409      	BRNE PC+2
000151 c00e      	RJMP _0xA
                 ;      92    {
                 ;      93    --tx_counter0;
000152 94ca      	DEC  R12
                 ;      94    UDR0=tx_buffer0[tx_rd_index0];
000153 2deb      	MOV  R30,R11
000154 d3ab      	RCALL SUBOPT_0x0
000155 57e8      	SUBI R30,LOW(-_tx_buffer0)
000156 4ffe      	SBCI R31,HIGH(-_tx_buffer0)
000157 81e0      	LD   R30,Z
000158 93e0 00c6 	STS  198,R30
                 ;      95    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00015a 94b3      	INC  R11
00015b e0e8      	LDI  R30,LOW(8)
00015c 15eb      	CP   R30,R11
00015d f009      	BREQ PC+2
00015e c001      	RJMP _0xB
00015f 24bb      	CLR  R11
                 ;      96    };
                 _0xB:
                 _0xA:
                 ;      97 }
000160 91e9      	LD   R30,Y+
000161 bfef      	OUT  SREG,R30
000162 91f9      	LD   R31,Y+
000163 91e9      	LD   R30,Y+
000164 9518      	RETI
                 ;      98 
                 ;      99 #ifndef _DEBUG_TERMINAL_IO_
                 ;     100 // Write a character to the USART Transmitter buffer
                 ;     101 #define _ALTERNATE_PUTCHAR_
                 ;     102 #pragma used+
                 ;     103 void putchar(char c)
                 ;     104 {
                 _putchar:
                 ;     105 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0xC:
000165 e0e8      	LDI  R30,LOW(8)
000166 15ec      	CP   R30,R12
000167 f009      	BREQ PC+2
000168 c001      	RJMP _0xE
000169 cffb      	RJMP _0xC
                 _0xE:
                 ;     106 #asm("cli")
00016a 94f8      	cli
                 ;     107 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
00016b 20cc      	TST  R12
00016c f009      	BREQ PC+2
00016d c006      	RJMP _0x10
00016e 91e0 00c0 	LDS  R30,192
000170 72e0      	ANDI R30,LOW(0x20)
000171 f409      	BRNE PC+2
000172 c001      	RJMP _0x10
000173 c00e      	RJMP _0xF
                 _0x10:
                 ;     108    {
                 ;     109    tx_buffer0[tx_wr_index0]=c;
000174 2dea      	MOV  R30,R10
000175 d38a      	RCALL SUBOPT_0x0
000176 57e8      	SUBI R30,LOW(-_tx_buffer0)
000177 4ffe      	SBCI R31,HIGH(-_tx_buffer0)
000178 81a8      	LD   R26,Y
000179 83a0      	STD  Z+0,R26
                 ;     110    if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
00017a 94a3      	INC  R10
00017b e0e8      	LDI  R30,LOW(8)
00017c 15ea      	CP   R30,R10
00017d f009      	BREQ PC+2
00017e c001      	RJMP _0x12
00017f 24aa      	CLR  R10
                 ;     111    ++tx_counter0;
                 _0x12:
000180 94c3      	INC  R12
                 ;     112    }
                 ;     113 else
000181 c003      	RJMP _0x13
                 _0xF:
                 ;     114    UDR0=c;
000182 81e8      	LD   R30,Y
000183 93e0 00c6 	STS  198,R30
                 ;     115 #asm("sei")
                 _0x13:
000185 9478      	sei
                 ;     116 }
000186 9621      	ADIW R28,1
000187 9508      	RET
                 ;     117 #pragma used-
                 ;     118 #endif
                 ;     119   //--------------------------------------------------------------------------------------------------------
                 ;     120 //   unsigned char ME[]="$Hello my world";
                 ;     121  #include <stdio.h>
                 ;     122 // unsigned int count=0;
                 ;     123 // // Timer 1 overflow interrupt service routine
                 ;     124 // interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ;     125 // {
                 ;     126 // // Reinitialize Timer 1 value
                 ;     127 // 
                 ;     128 // TCNT1H=0xFC;
                 ;     129 // TCNT1L=0xEC;  
                 ;     130 // 
                 ;     131 // count++;
                 ;     132 // if(count==5)
                 ;     133 // {
                 ;     134 //  count=0;
                 ;     135 // // Place your code here  
                 ;     136 // j++;
                 ;     137 // clear_lcd();
                 ;     138 // lcd_cmd(0x80);
                 ;     139 // lcd_puts(ME+j);
                 ;     140 // //delay_ms(1000);
                 ;     141 //   
                 ;     142 // if(j==16)
                 ;     143 // {
                 ;     144 // j=0;
                 ;     145 // }
                 ;     146 // }
                 ;     147 // } 
                 ;     148 //------------------------------------------------------------------------------------------------------
                 ;     149 #define ADC_VREF_TYPE 0x00
                 ;     150 
                 ;     151 // Read the AD conversion result
                 ;     152 unsigned int read_adc(unsigned char adc_input)
                 ;     153 {
                 ;     154 ADMUX=adc_input|ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ;     155 // Start the AD conversion
                 ;     156 ADCSRA|=0x40;
                 ;     157 // Wait for the AD conversion to complete
                 ;     158 while ((ADCSRA & 0x10)==0);
                 ;     159 ADCSRA|=0x10;
                 ;     160 return ADCW;
                 ;     161 }
                 ;     162 
                 ;     163  unsigned char data=0;      
                 ;     164  unsigned char stop=0;  
                 ;     165  unsigned char cmd1[]="GPGLL,";
                 
                 	.DSEG
                 _cmd1:
000190           	.BYTE 0x7
                 ;     166  unsigned char cmd2[]=",N,0";     
                 _cmd2:
000197           	.BYTE 0x5
                 ;     167  unsigned char cmd3[]="A00190D446A";    
                 _cmd3:
00019c           	.BYTE 0xC
                 ;     168  unsigned char cmd4[]="A0019ADCC42"; 
                 _cmd4:
0001a8           	.BYTE 0xC
                 ;     169  unsigned char cmd5[]="A0018BFB12C";
                 _cmd5:
0001b4           	.BYTE 0xC
                 ;     170  unsigned char cmd6[]="A00190A7059";  
                 _cmd6:
0001c0           	.BYTE 0xC
                 ;     171  unsigned char LAT[9],LOG[9];    
                 _LAT:
0001cc           	.BYTE 0x9
                 _LOG:
0001d5           	.BYTE 0x9
                 ;     172  unsigned char msg4[]="ip",ip[16],ipi[]=" Reading IP wait";
                 _msg4:
0001de           	.BYTE 0x3
                 _ip:
0001e1           	.BYTE 0x10
                 _ipi:
0001f1           	.BYTE 0x11
                 ;     173        
                 ;     174  
                 ;     175  unsigned char cmd7[]="Rahul";
                 _cmd7:
000202           	.BYTE 0x6
                 ;     176  unsigned char cmd8[]="Siddarth";
                 _cmd8:
000208           	.BYTE 0x9
                 ;     177  unsigned char cmd9[]="Nikhil";
                 _cmd9:
000211           	.BYTE 0x7
                 ;     178  unsigned char cmd10[]="Suresh";
                 _cmd10:
000218           	.BYTE 0x7
                 ;     179  unsigned char cmd11[]="Ramesh";
                 _cmd11:
00021f           	.BYTE 0x7
                 ;     180  unsigned char cmd12[]="Swipe Ur Card";    
                 _cmd12:
000226           	.BYTE 0xE
                 ;     181   unsigned char cmd13[]="Invalid";
                 _cmd13:
000234           	.BYTE 0x8
                 ;     182 unsigned char ME1[16];
                 _ME1:
00023c           	.BYTE 0x10
                 ;     183  unsigned char cmp[12];     
                 _cmp:
00024c           	.BYTE 0xC
                 ;     184  unsigned char buff[25]; 
                 _buff:
000258           	.BYTE 0x19
                 ;     185  void main(void) 
                 ;     186       
                 ;     187 {
                 
                 	.CSEG
                 _main:
                 ;     188 // Declare your local variables here
                 ;     189 //unsigned char AR[]="hello welcome to mesoln";
                 ;     190 //unsigned char n3[]="Lcd Testing";
                 ;     191 // Crystal Oscillator division factor: 1
                 ;     192 #pragma optsize-
                 ;     193 CLKPR=0x80;
000188 e8e0      	LDI  R30,LOW(128)
000189 93e0 0061 	STS  97,R30
                 ;     194 CLKPR=0x00;
00018b e0e0      	LDI  R30,LOW(0)
00018c 93e0 0061 	STS  97,R30
                 ;     195 #ifdef _OPTIMIZE_SIZE_
                 ;     196 #pragma optsize+
                 ;     197 #endif
                 ;     198 
                 ;     199 // Input/Output Ports initialization
                 ;     200 // Port B initialization
                 ;     201 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     202 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     203 PORTB=0x00;
00018e b9e5      	OUT  0x5,R30
                 ;     204 DDRB=0x07;
00018f e0e7      	LDI  R30,LOW(7)
000190 b9e4      	OUT  0x4,R30
                 ;     205 
                 ;     206 // Port C initialization
                 ;     207 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     208 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     209 PORTC=0x00;
000191 e0e0      	LDI  R30,LOW(0)
000192 b9e8      	OUT  0x8,R30
                 ;     210 DDRC=0x33;
000193 e3e3      	LDI  R30,LOW(51)
000194 b9e7      	OUT  0x7,R30
                 ;     211 
                 ;     212 // Port D initialization
                 ;     213 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
                 ;     214 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
                 ;     215 // PORTD=0x00;
                 ;     216 // DDRD=0xf0;
                 ;     217 PORTD=0x04;
000195 e0e4      	LDI  R30,LOW(4)
000196 b9eb      	OUT  0xB,R30
                 ;     218 DDRD=0xF4;
000197 efe4      	LDI  R30,LOW(244)
000198 b9ea      	OUT  0xA,R30
                 ;     219 
                 ;     220 
                 ;     221 
                 ;     222 // Timer/Counter 2 initialization
                 ;     223 // Clock source: System Clock
                 ;     224 // Clock value: Timer 2 Stopped
                 ;     225 // Mode: Normal top=FFh
                 ;     226 // OC2A output: Disconnected
                 ;     227 // OC2B output: Disconnected
                 ;     228 ASSR=0x00;
000199 e0e0      	LDI  R30,LOW(0)
00019a 93e0 00b6 	STS  182,R30
                 ;     229 TCCR2A=0x00;
00019c 93e0 00b0 	STS  176,R30
                 ;     230 TCCR2B=0x00;
00019e 93e0 00b1 	STS  177,R30
                 ;     231 TCNT2=0x00;
0001a0 93e0 00b2 	STS  178,R30
                 ;     232 OCR2A=0x00;
0001a2 93e0 00b3 	STS  179,R30
                 ;     233 OCR2B=0x00;
0001a4 93e0 00b4 	STS  180,R30
                 ;     234 
                 ;     235 // External Interrupt(s) initialization
                 ;     236 // INT0: Off
                 ;     237 // INT1: Off
                 ;     238 // Interrupt on any change on pins PCINT0-7: Off
                 ;     239 // Interrupt on any change on pins PCINT8-14: Off
                 ;     240 // Interrupt on any change on pins PCINT16-23: Off
                 ;     241 EICRA=0x00;
0001a6 93e0 0069 	STS  105,R30
                 ;     242 EIMSK=0x00;
0001a8 bbed      	OUT  0x1D,R30
                 ;     243 PCICR=0x00;
0001a9 93e0 0068 	STS  104,R30
                 ;     244 
                 ;     245 
                 ;     246 
                 ;     247 // USART initialization
                 ;     248 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ;     249 // USART Receiver: On
                 ;     250 // USART Transmitter: On
                 ;     251 // USART0 Mode: Asynchronous
                 ;     252 // USART Baud rate: 9600
                 ;     253 UCSR0A=0x00;
0001ab 93e0 00c0 	STS  192,R30
                 ;     254 UCSR0B=0xD8;
0001ad ede8      	LDI  R30,LOW(216)
0001ae 93e0 00c1 	STS  193,R30
                 ;     255 UCSR0C=0x06;
0001b0 e0e6      	LDI  R30,LOW(6)
0001b1 93e0 00c2 	STS  194,R30
                 ;     256 UBRR0H=0x00;
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93e0 00c5 	STS  197,R30
                 ;     257 UBRR0L=0x33;
0001b6 e3e3      	LDI  R30,LOW(51)
0001b7 93e0 00c4 	STS  196,R30
                 ;     258 
                 ;     259 // // Timer/Counter 1 initialization
                 ;     260 // // Clock source: System Clock
                 ;     261 // // Clock value: 7.813 kHz
                 ;     262 // // Mode: Normal top=FFFFh
                 ;     263 // // OC1A output: Discon.
                 ;     264 // // OC1B output: Discon.
                 ;     265 // // Noise Canceler: Off
                 ;     266 // // Input Capture on Falling Edge
                 ;     267 // // Timer 1 Overflow Interrupt: On
                 ;     268 // // Input Capture Interrupt: Off
                 ;     269 // // Compare A Match Interrupt: Off
                 ;     270 // // Compare B Match Interrupt: Off
                 ;     271 // TCCR1A=0x00;
                 ;     272 // TCCR1B=0x05;
                 ;     273 // TCNT1H=0xFC;
                 ;     274 // TCNT1L=0xEC;
                 ;     275 // ICR1H=0x00;
                 ;     276 // ICR1L=0x00;
                 ;     277 // OCR1AH=0x00;
                 ;     278 // OCR1AL=0x00;
                 ;     279 // OCR1BH=0x00;
                 ;     280 // OCR1BL=0x00;
                 ;     281 
                 ;     282 
                 ;     283 
                 ;     284 
                 ;     285 // Analog Comparator initialization
                 ;     286 // Analog Comparator: Off
                 ;     287 // Analog Comparator Input Capture by Timer/Counter 1: Off        
                 ;     288    
                 ;     289 //------------------------------------------------------------------------------------------------------------
                 ;     290 //----------------------------------------------------------------------------------------------------------
                 ;     291 
                 ;     292 ACSR=0x80;
0001b9 e8e0      	LDI  R30,LOW(128)
0001ba bfe0      	OUT  0x30,R30
                 ;     293 ADCSRB=0x00;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 007b 	STS  123,R30
                 ;     294 //delay_ms(5000);     
                 ;     295 #asm("sei")
0001be 9478      	sei
                 ;     296 //delay_ms(5000);
                 ;     297   
                 ;     298   PORTC.5=1;  
0001bf 9a45      	SBI  0x8,5
                 ;     299   PORTC.4=1;  
0001c0 9a44      	SBI  0x8,4
                 ;     300   
                 ;     301 // printf("at \r"); 
                 ;     302 // printf("at+cmgf=1\r");
                 ;     303 // delay_ms(1000);
                 ;     304 clear_lcd();
0001c1 d340      	RCALL SUBOPT_0x1
                 ;     305 lcd_init();
                 ;     306 lcd_cmd(0x80);
                 ;     307 lcd_puts(cmd12);
0001c2 d344      	RCALL SUBOPT_0x2
                 ;     308 delay_ms(5000);
0001c3 d348      	RCALL SUBOPT_0x3
                 ;     309 clear_lcd();       
0001c4 d168      	RCALL _clear_lcd
                 ;     310 
                 ;     311 while(1)
                 _0x17:
                 ;     312 {
                 ;     313 lcd_cmd(0x80);
0001c5 d34b      	RCALL SUBOPT_0x4
                 ;     314 lcd_puts(cmd12);   
0001c6 d340      	RCALL SUBOPT_0x2
                 ;     315 
                 ;     316   PORTC.5=1;  
0001c7 9a45      	SBI  0x8,5
                 ;     317   PORTC.4=1;
0001c8 9a44      	SBI  0x8,4
                 ;     318   
                 ;     319  if(rx_counter0>0)
0001c9 e0e0      	LDI  R30,LOW(0)
0001ca 15e9      	CP   R30,R9
0001cb f008      	BRLO PC+2
0001cc c04c      	RJMP _0x1A
                 ;     320  {
                 ;     321   while(getchar()!='3');
                 _0x1B:
0001cd df67      	RCALL _getchar
0001ce 33e3      	CPI  R30,LOW(0x33)
0001cf f409      	BRNE PC+2
0001d0 c001      	RJMP _0x1D
0001d1 cffb      	RJMP _0x1B
                 _0x1D:
                 ;     322    
                 ;     323  for(i=0;i<11;i++)
0001d2 2444      	CLR  R4
                 _0x1F:
0001d3 e0eb      	LDI  R30,LOW(11)
0001d4 164e      	CP   R4,R30
0001d5 f008      	BRLO PC+2
0001d6 c00c      	RJMP _0x20
                 ;     324   {   
                 ;     325  cmp[i]=getchar();
0001d7 d33c      	RCALL SUBOPT_0x5
0001d8 93ff      	PUSH R31
0001d9 93ef      	PUSH R30
0001da df5a      	RCALL _getchar
0001db 91af      	POP  R26
0001dc 91bf      	POP  R27
0001dd 93ec      	ST   X,R30
                 ;     326  putchar(cmp[i]);
0001de d335      	RCALL SUBOPT_0x5
0001df d339      	RCALL SUBOPT_0x6
0001e0 df84      	RCALL _putchar
                 ;     327  }
                 _0x1E:
0001e1 9443      	INC  R4
0001e2 cff0      	RJMP _0x1F
                 _0x20:
                 ;     328  cmp[11]='\0'; 
0001e3 e0e0      	LDI  R30,LOW(0)
0001e4 93e0 0257 	__PUTB1MN _cmp,11
                 ;     329    //puts(cmp);   
                 ;     330 
                 ;     331    
                 ;     332 //-----------------------------   
                 ;     333   if(strcmp(cmp, cmd3)==0)
0001e6 d335      	RCALL SUBOPT_0x7
0001e7 e9ec      	LDI  R30,LOW(_cmd3)
0001e8 e0f1      	LDI  R31,HIGH(_cmd3)
0001e9 d337      	RCALL SUBOPT_0x8
0001ea d339      	RCALL SUBOPT_0x9
0001eb f009      	BREQ PC+2
0001ec c005      	RJMP _0x21
                 ;     334  { 
                 ;     335 // puts(cmp); 
                 ;     336 // printf("at \r"); 
                 ;     337 // printf("at+cmgf=1\r");
                 ;     338 // delay_ms(1000);
                 ;     339 // printf("at+cfun=1\r");
                 ;     340 // delay_ms(1000);
                 ;     341 // printf("at+cmgs=");
                 ;     342 // putchar('"'); 
                 ;     343 // printf("9242838716");
                 ;     344 // putchar('"');
                 ;     345 // delay_ms(300);
                 ;     346 // printf("\r");    
                 ;     347 
                 ;     348 clear_lcd();
0001ed d314      	RCALL SUBOPT_0x1
                 ;     349 lcd_init();
                 ;     350 lcd_cmd(0x80);
                 ;     351 lcd_puts(cmd7);
0001ee e0e2      	LDI  R30,LOW(_cmd7)
0001ef e0f2      	LDI  R31,HIGH(_cmd7)
0001f0 d336      	RCALL SUBOPT_0xA
                 ;     352 delay_ms(1000);  
                 ;     353 
                 ;     354 gps();   
                 ;     355 
                 ;     356 
                 ;     357 
                 ;     358 } 
                 ;     359 
                 ;     360 // putchar(0x1a); 
                 ;     361 // delay_ms(300);
                 ;     362     
                 ;     363 
                 ;     364 //------------------------------
                 ;     365 else
0001f1 c027      	RJMP _0x22
                 _0x21:
                 ;     366   if(strcmp(cmp, cmd4)==0)
0001f2 d329      	RCALL SUBOPT_0x7
0001f3 eae8      	LDI  R30,LOW(_cmd4)
0001f4 e0f1      	LDI  R31,HIGH(_cmd4)
0001f5 d338      	RCALL SUBOPT_0xB
0001f6 f009      	BREQ PC+2
0001f7 c005      	RJMP _0x23
                 ;     367  {
                 ;     368 //  printf("at \r"); 
                 ;     369 // printf("at+cmgf=1\r");
                 ;     370 // delay_ms(1000);
                 ;     371 // printf("at+cfun=1\r");
                 ;     372 // delay_ms(1000);
                 ;     373 // printf("at+cmgs=");
                 ;     374 // putchar('"'); 
                 ;     375 // printf("9242838716");
                 ;     376 // putchar('"');
                 ;     377 // delay_ms(300);
                 ;     378 // printf("\r");   
                 ;     379 
                 ;     380 
                 ;     381 clear_lcd();
0001f8 d309      	RCALL SUBOPT_0x1
                 ;     382 lcd_init();
                 ;     383 lcd_cmd(0x80);
                 ;     384 lcd_puts(cmd8);
0001f9 e0e8      	LDI  R30,LOW(_cmd8)
0001fa e0f2      	LDI  R31,HIGH(_cmd8)
0001fb d32b      	RCALL SUBOPT_0xA
                 ;     385 delay_ms(1000);    
                 ;     386 
                 ;     387 gps();  
                 ;     388 
                 ;     389 
                 ;     390 
                 ;     391 }       
                 ;     392 
                 ;     393 
                 ;     394 // putchar(0x1a); 
                 ;     395 // delay_ms(300);
                 ;     396  
                 ;     397  
                 ;     398  //--------------------------------------- 
                 ;     399  else
0001fc c01c      	RJMP _0x24
                 _0x23:
                 ;     400   if(strcmp(cmp, cmd5)==0)
0001fd d31e      	RCALL SUBOPT_0x7
0001fe ebe4      	LDI  R30,LOW(_cmd5)
0001ff e0f1      	LDI  R31,HIGH(_cmd5)
000200 d32d      	RCALL SUBOPT_0xB
000201 f009      	BREQ PC+2
000202 c005      	RJMP _0x25
                 ;     401  {
                 ;     402 // printf("at \r"); 
                 ;     403 // printf("at+cmgf=1\r");
                 ;     404 // delay_ms(1000);
                 ;     405 // printf("at+cfun=1\r");
                 ;     406 // delay_ms(1000);
                 ;     407 // printf("at+cmgs=");
                 ;     408 // putchar('"'); 
                 ;     409 // printf("9242838716");
                 ;     410 // putchar('"');
                 ;     411 // delay_ms(300);
                 ;     412 // printf("\r");     
                 ;     413 
                 ;     414 clear_lcd();
000203 d2fe      	RCALL SUBOPT_0x1
                 ;     415 lcd_init();
                 ;     416 lcd_cmd(0x80);
                 ;     417 lcd_puts(cmd9);
000204 e1e1      	LDI  R30,LOW(_cmd9)
000205 e0f2      	LDI  R31,HIGH(_cmd9)
000206 d320      	RCALL SUBOPT_0xA
                 ;     418 delay_ms(1000); 
                 ;     419 
                 ;     420 gps();     
                 ;     421 
                 ;     422 
                 ;     423 
                 ;     424 }  
                 ;     425 
                 ;     426 
                 ;     427 
                 ;     428 // putchar(0x1a); 
                 ;     429 // delay_ms(300);
                 ;     430     
                 ;     431  //--------------------------------------     
                 ;     432  else
000207 c011      	RJMP _0x26
                 _0x25:
                 ;     433  if(strcmp(cmp, cmd6)==0)
000208 d313      	RCALL SUBOPT_0x7
000209 ece0      	LDI  R30,LOW(_cmd6)
00020a e0f1      	LDI  R31,HIGH(_cmd6)
00020b d322      	RCALL SUBOPT_0xB
00020c f009      	BREQ PC+2
00020d c005      	RJMP _0x27
                 ;     434  {
                 ;     435 // printf("at \r"); 
                 ;     436 // printf("at+cmgf=1\r");
                 ;     437 // delay_ms(1000);
                 ;     438 // printf("at+cfun=1\r");
                 ;     439 // delay_ms(1000);
                 ;     440 // printf("at+cmgs=");
                 ;     441 // putchar('"'); 
                 ;     442 // printf("9242838716");
                 ;     443 // putchar('"');
                 ;     444 // delay_ms(300);
                 ;     445 // printf("\r"); 
                 ;     446 
                 ;     447 clear_lcd();
00020e d2f3      	RCALL SUBOPT_0x1
                 ;     448 lcd_init();
                 ;     449 lcd_cmd(0x80);
                 ;     450 lcd_puts(cmd10);
00020f e1e8      	LDI  R30,LOW(_cmd10)
000210 e0f2      	LDI  R31,HIGH(_cmd10)
000211 d315      	RCALL SUBOPT_0xA
                 ;     451 delay_ms(1000);    
                 ;     452 
                 ;     453 gps();     
                 ;     454 
                 ;     455 
                 ;     456 
                 ;     457 }  
                 ;     458  
                 ;     459 // putchar(0x1a); 
                 ;     460 // delay_ms(300);
                 ;     461   
                 ;     462 //-------------- 
                 ;     463  else
000212 c006      	RJMP _0x28
                 _0x27:
                 ;     464  {
                 ;     465 
                 ;     466 clear_lcd();
000213 d2ee      	RCALL SUBOPT_0x1
                 ;     467 lcd_init();
                 ;     468 lcd_cmd(0x80);
                 ;     469 lcd_puts(cmd13);
000214 e3e4      	LDI  R30,LOW(_cmd13)
000215 e0f2      	LDI  R31,HIGH(_cmd13)
000216 d30a      	RCALL SUBOPT_0x8
000217 d16e      	RCALL _lcd_puts
                 ;     470 delay_ms(1000);
000218 d317      	RCALL SUBOPT_0xC
                 ;     471  } 
                 _0x28:
                 _0x26:
                 _0x24:
                 _0x22:
                 ;     472  }
                 ;     473  };
                 _0x1A:
000219 cfab      	RJMP _0x17
                 _0x19:
                 ;     474 
                 ;     475 }    
                 _0x29:
00021a cfff      	RJMP _0x29
                 ;     476 
                 ;     477 void gps(void)
                 ;     478 {
                 _gps:
                 ;     479 delay_ms(300);
00021b d318      	RCALL SUBOPT_0xD
                 ;     480 
                 ;     481 PORTC.5=0; 
00021c 9845      	CBI  0x8,5
                 ;     482 PORTC.4=1;  
00021d 9a44      	SBI  0x8,4
                 ;     483 
                 ;     484 delay_ms(300);  
00021e d315      	RCALL SUBOPT_0xD
                 ;     485 
                 ;     486 while(stop!=1)
                 _0x2A:
00021f e0e1      	LDI  R30,LOW(1)
000220 15ee      	CP   R30,R14
000221 f409      	BRNE PC+2
000222 c0ad      	RJMP _0x2C
                 ;     487 {
                 ;     488 if(rx_counter0>0)      
000223 e0e0      	LDI  R30,LOW(0)
000224 15e9      	CP   R30,R9
000225 f008      	BRLO PC+2
000226 c0a8      	RJMP _0x2D
                 ;     489  {
                 ;     490  while(getchar()!='$');
                 _0x2E:
000227 df0d      	RCALL _getchar
000228 32e4      	CPI  R30,LOW(0x24)
000229 f409      	BRNE PC+2
00022a c001      	RJMP _0x30
00022b cffb      	RJMP _0x2E
                 _0x30:
                 ;     491  {
                 ;     492 for(i=0;i<6;i++)
00022c 2444      	CLR  R4
                 _0x32:
00022d e0e6      	LDI  R30,LOW(6)
00022e 164e      	CP   R4,R30
00022f f008      	BRLO PC+2
000230 c009      	RJMP _0x33
                 ;     493 {   
                 ;     494  cmp[i]=getchar();
000231 d2e2      	RCALL SUBOPT_0x5
000232 93ff      	PUSH R31
000233 93ef      	PUSH R30
000234 df00      	RCALL _getchar
000235 91af      	POP  R26
000236 91bf      	POP  R27
000237 93ec      	ST   X,R30
                 ;     495  }
                 _0x31:
000238 9443      	INC  R4
000239 cff3      	RJMP _0x32
                 _0x33:
                 ;     496  cmp[6]='\0'; 
00023a e0e0      	LDI  R30,LOW(0)
00023b 93e0 0252 	__PUTB1MN _cmp,6
                 ;     497 }
                 ;     498   if (strcmp(cmp, cmd1)==0)   
00023d d2de      	RCALL SUBOPT_0x7
00023e e9e0      	LDI  R30,LOW(_cmd1)
00023f e0f1      	LDI  R31,HIGH(_cmd1)
000240 d2ed      	RCALL SUBOPT_0xB
000241 f009      	BREQ PC+2
000242 c08c      	RJMP _0x34
                 ;     499   { 
                 ;     500   stop=0;   
000243 24ee      	CLR  R14
                 ;     501   for(j=0;j<24;j++)
000244 2455      	CLR  R5
                 _0x36:
000245 e1e8      	LDI  R30,LOW(24)
000246 165e      	CP   R5,R30
000247 f008      	BRLO PC+2
000248 c009      	RJMP _0x37
                 ;     502   {
                 ;     503   buff[j]=getchar();
000249 d2ee      	RCALL SUBOPT_0xE
00024a 93ff      	PUSH R31
00024b 93ef      	PUSH R30
00024c dee8      	RCALL _getchar
00024d 91af      	POP  R26
00024e 91bf      	POP  R27
00024f 93ec      	ST   X,R30
                 ;     504   }  
                 _0x35:
000250 9453      	INC  R5
000251 cff3      	RJMP _0x36
                 _0x37:
                 ;     505   buff[24]='\0';     
000252 e0e0      	LDI  R30,LOW(0)
000253 93e0 0270 	__PUTB1MN _buff,24
                 ;     506 
                 ;     507 delay_ms(300); 
000255 d2de      	RCALL SUBOPT_0xD
                 ;     508 printf("at \r"); 
000256 ede0
000257 e0f0      	__POINTW1FN _0,138
000258 d2e4      	RCALL SUBOPT_0xF
                 ;     509 printf("at+cmgf=1\r");
000259 ede5
00025a e0f0      	__POINTW1FN _0,143
00025b d2e1      	RCALL SUBOPT_0xF
                 ;     510 delay_ms(1000);
00025c d2d3      	RCALL SUBOPT_0xC
                 ;     511 printf("at+cfun=1\r");
00025d eee0
00025e e0f0      	__POINTW1FN _0,154
00025f d2dd      	RCALL SUBOPT_0xF
                 ;     512 delay_ms(1000);
000260 d2cf      	RCALL SUBOPT_0xC
                 ;     513 printf("at+cmgs=");
000261 eeeb
000262 e0f0      	__POINTW1FN _0,165
000263 d2d9      	RCALL SUBOPT_0xF
                 ;     514 putchar('"'); 
000264 e2e2      	LDI  R30,LOW(34)
000265 d2dc      	RCALL SUBOPT_0x10
                 ;     515 printf("9242838716");
000266 efe4
000267 e0f0      	__POINTW1FN _0,174
000268 d2d4      	RCALL SUBOPT_0xF
                 ;     516 putchar('"');
000269 e2e2      	LDI  R30,LOW(34)
00026a d2d7      	RCALL SUBOPT_0x10
                 ;     517 delay_ms(800);
00026b e2e0      	LDI  R30,LOW(800)
00026c e0f3      	LDI  R31,HIGH(800)
00026d d2d6      	RCALL SUBOPT_0x11
                 ;     518 printf("\r"); 
00026e d2d7      	RCALL SUBOPT_0x12
                 ;     519 delay_ms(300); 
00026f d2c4      	RCALL SUBOPT_0xD
                 ;     520 printf("@LT");
000270 efef
000271 e0f0      	__POINTW1FN _0,185
000272 d2ca      	RCALL SUBOPT_0xF
                 ;     521 clear_lcd();
000273 d0b9      	RCALL _clear_lcd
                 ;     522 //lcd_init();
                 ;     523 lcd_cmd(0x80);
000274 d29c      	RCALL SUBOPT_0x4
                 ;     524 for(j=0;j<9;j++)
000275 2455      	CLR  R5
                 _0x39:
000276 e0e9      	LDI  R30,LOW(9)
000277 165e      	CP   R5,R30
000278 f008      	BRLO PC+2
000279 c010      	RJMP _0x3A
                 ;     525 {  
                 ;     526   LOG[j]=buff[j];
00027a 2da5      	MOV  R26,R5
00027b e0b0      	LDI  R27,0
00027c 52ab      	SUBI R26,LOW(-_LOG)
00027d 4fbe      	SBCI R27,HIGH(-_LOG)
00027e d2b9      	RCALL SUBOPT_0xE
00027f 81e0      	LD   R30,Z
000280 93ec      	ST   X,R30
                 ;     527   lcd_data(buff[j],0);
000281 d2b6      	RCALL SUBOPT_0xE
000282 d296      	RCALL SUBOPT_0x6
000283 e0e0      	LDI  R30,LOW(0)
000284 d2c4      	RCALL SUBOPT_0x13
                 ;     528   putchar(buff[j]);
000285 d2b2      	RCALL SUBOPT_0xE
000286 d292      	RCALL SUBOPT_0x6
000287 dedd      	RCALL _putchar
                 ;     529 //delay_ms(1000);
                 ;     530 } 
                 _0x38:
000288 9453      	INC  R5
000289 cfec      	RJMP _0x39
                 _0x3A:
                 ;     531 //LAT[9]='/0';
                 ;     532 
                 ;     533 //lcd_puts(LAT);
                 ;     534 printf("LG");  
00028a e0e3
00028b e0f1      	__POINTW1FN _0,189
00028c d2b0      	RCALL SUBOPT_0xF
                 ;     535 
                 ;     536 lcd_cmd(0xC0);
00028d ece0      	LDI  R30,LOW(192)
00028e d2bc      	RCALL SUBOPT_0x14
                 ;     537 
                 ;     538 for(j=14;j<23;j++)
00028f e0ee      	LDI  R30,LOW(14)
000290 2e5e      	MOV  R5,R30
                 _0x3C:
000291 e1e7      	LDI  R30,LOW(23)
000292 165e      	CP   R5,R30
000293 f008      	BRLO PC+2
000294 c012      	RJMP _0x3D
                 ;     539 {   
                 ;     540 //lcd_init();
                 ;     541   putchar(buff[j]);
000295 d2a2      	RCALL SUBOPT_0xE
000296 d282      	RCALL SUBOPT_0x6
000297 decd      	RCALL _putchar
                 ;     542   lcd_data(buff[j],0);
000298 d29f      	RCALL SUBOPT_0xE
000299 d27f      	RCALL SUBOPT_0x6
00029a e0e0      	LDI  R30,LOW(0)
00029b d2ad      	RCALL SUBOPT_0x13
                 ;     543 LOG[14-j]=buff[j];
00029c e0ee      	LDI  R30,LOW(14)
00029d 19e5      	SUB  R30,R5
00029e d261      	RCALL SUBOPT_0x0
00029f 52eb      	SUBI R30,LOW(-_LOG)
0002a0 4ffe      	SBCI R31,HIGH(-_LOG)
0002a1 01df      	MOVW R26,R30
0002a2 d295      	RCALL SUBOPT_0xE
0002a3 81e0      	LD   R30,Z
0002a4 93ec      	ST   X,R30
                 ;     544 } 
                 _0x3B:
0002a5 9453      	INC  R5
0002a6 cfea      	RJMP _0x3C
                 _0x3D:
                 ;     545 
                 ;     546 
                 ;     547 
                 ;     548 //LOG[9]='/0';
                 ;     549 //lcd_cmd(0xC0);
                 ;     550 //lcd_puts(LOG);
                 ;     551 delay_ms(1000);
0002a7 d288      	RCALL SUBOPT_0xC
                 ;     552 putchar(0x1a); 
0002a8 e1ea      	LDI  R30,LOW(26)
0002a9 d298      	RCALL SUBOPT_0x10
                 ;     553 //delay_ms(8000); 
                 ;     554 
                 ;     555 //delay_ms(1000);     
                 ;     556 delay_ms(20000); 
0002aa e2e0      	LDI  R30,LOW(20000)
0002ab e4fe      	LDI  R31,HIGH(20000)
0002ac d297      	RCALL SUBOPT_0x11
                 ;     557   gprs(); 
0002ad d038      	RCALL _gprs
                 ;     558   delay_ms(5000); 
0002ae d25d      	RCALL SUBOPT_0x3
                 ;     559   send_cmd();
0002af d021      	RCALL _send_cmd
                 ;     560   printf("@LT");
0002b0 efef
0002b1 e0f0      	__POINTW1FN _0,185
0002b2 d28a      	RCALL SUBOPT_0xF
                 ;     561 clear_lcd();
0002b3 d079      	RCALL _clear_lcd
                 ;     562 //lcd_init();
                 ;     563 //lcd_cmd(0x80);
                 ;     564 for(j=0;j<9;j++)
0002b4 2455      	CLR  R5
                 _0x3F:
0002b5 e0e9      	LDI  R30,LOW(9)
0002b6 165e      	CP   R5,R30
0002b7 f008      	BRLO PC+2
0002b8 c005      	RJMP _0x40
                 ;     565 {  
                 ;     566   //LOG[j]=buff[j];
                 ;     567   //lcd_data(buff[j],0);
                 ;     568   putchar(buff[j]);
0002b9 d27e      	RCALL SUBOPT_0xE
0002ba d25e      	RCALL SUBOPT_0x6
0002bb dea9      	RCALL _putchar
                 ;     569 //delay_ms(1000);
                 ;     570 } 
                 _0x3E:
0002bc 9453      	INC  R5
0002bd cff7      	RJMP _0x3F
                 _0x40:
                 ;     571 //LAT[9]='/0';
                 ;     572 
                 ;     573 //lcd_puts(LAT);
                 ;     574 printf("LG");  
0002be e0e3
0002bf e0f1      	__POINTW1FN _0,189
0002c0 d27c      	RCALL SUBOPT_0xF
                 ;     575 
                 ;     576 //lcd_cmd(0xC0);
                 ;     577 
                 ;     578 for(j=14;j<23;j++)
0002c1 e0ee      	LDI  R30,LOW(14)
0002c2 2e5e      	MOV  R5,R30
                 _0x42:
0002c3 e1e7      	LDI  R30,LOW(23)
0002c4 165e      	CP   R5,R30
0002c5 f008      	BRLO PC+2
0002c6 c005      	RJMP _0x43
                 ;     579 {   
                 ;     580 //lcd_init();
                 ;     581   putchar(buff[j]);
0002c7 d270      	RCALL SUBOPT_0xE
0002c8 d250      	RCALL SUBOPT_0x6
0002c9 de9b      	RCALL _putchar
                 ;     582   //lcd_data(buff[j],0);
                 ;     583 //LOG[14-j]=buff[j];
                 ;     584 }
                 _0x41:
0002ca 9453      	INC  R5
0002cb cff7      	RJMP _0x42
                 _0x43:
                 ;     585 latch_cmd();
0002cc d012      	RCALL _latch_cmd
                 ;     586 delay_ms(5000);
0002cd d23e      	RCALL SUBOPT_0x3
                 ;     587 clear_lcd();
0002ce d05e      	RCALL _clear_lcd
                 ;     588 
                 ;     589 }
                 ;     590 }    
                 _0x34:
                 ;     591 }
                 _0x2D:
0002cf cf4f      	RJMP _0x2A
                 _0x2C:
                 ;     592 }   
0002d0 9508      	RET
                 ;     593 
                 ;     594 
                 ;     595 void send_cmd(void)
                 ;     596 {  
                 _send_cmd:
                 ;     597  printf("AT\r");
0002d1 e0e6
0002d2 e0f1      	__POINTW1FN _0,192
0002d3 d269      	RCALL SUBOPT_0xF
                 ;     598   delay_ms(100);
0002d4 d278      	RCALL SUBOPT_0x15
                 ;     599   printf("AT+CMGF=1\r");
0002d5 e0ea
0002d6 e0f1      	__POINTW1FN _0,196
0002d7 d265      	RCALL SUBOPT_0xF
                 ;     600   delay_ms(100);
0002d8 d274      	RCALL SUBOPT_0x15
                 ;     601  printf("AT+CIPSEND");
0002d9 e1e5
0002da e0f1      	__POINTW1FN _0,207
0002db d261      	RCALL SUBOPT_0xF
                 ;     602  //delay_ms(1000); 
                 ;     603  printf("\r"); 
0002dc d269      	RCALL SUBOPT_0x12
                 ;     604  delay_ms(1000); 
0002dd d252      	RCALL SUBOPT_0xC
                 ;     605 }  
0002de 9508      	RET
                 ;     606  
                 ;     607 void latch_cmd(void)
                 ;     608 {
                 _latch_cmd:
                 ;     609  delay_ms(1000);
0002df d250      	RCALL SUBOPT_0xC
                 ;     610  putchar(0x1A);  
0002e0 e1ea      	LDI  R30,LOW(26)
0002e1 d260      	RCALL SUBOPT_0x10
                 ;     611  delay_ms(3000);
0002e2 ebe8      	LDI  R30,LOW(3000)
0002e3 e0fb      	LDI  R31,HIGH(3000)
0002e4 d25f      	RCALL SUBOPT_0x11
                 ;     612 //  printf("AT\r");
                 ;     613 //   delay_ms(1000);
                 ;     614 //   printf("AT+CMGF=1\r");
                 ;     615 //   delay_ms(1000); 
                 ;     616 }
0002e5 9508      	RET
                 ;     617              
                 ;     618 
                 ;     619 void gprs(void) 
                 ;     620 {  
                 _gprs:
                 ;     621 delay_ms(300);       
0002e6 d24d      	RCALL SUBOPT_0xD
                 ;     622 PORTC.5=0; 
0002e7 9845      	CBI  0x8,5
                 ;     623 PORTC.4=0;   
0002e8 9844      	CBI  0x8,4
                 ;     624 delay_ms(300);      
0002e9 d24a      	RCALL SUBOPT_0xD
                 ;     625 
                 ;     626  clear_lcd();
0002ea d042      	RCALL _clear_lcd
                 ;     627  lcd_cmd(0x80);
0002eb d225      	RCALL SUBOPT_0x4
                 ;     628  lcd_puts(ipi);
0002ec efe1      	LDI  R30,LOW(_ipi)
0002ed e0f1      	LDI  R31,HIGH(_ipi)
0002ee d232      	RCALL SUBOPT_0x8
0002ef d096      	RCALL _lcd_puts
                 ;     629  delay_ms(300);
0002f0 d243      	RCALL SUBOPT_0xD
                 ;     630  printf("AT"); 
0002f1 e2e0
0002f2 e0f1      	__POINTW1FN _0,218
0002f3 d249      	RCALL SUBOPT_0xF
                 ;     631  delay_ms(1000);
0002f4 d23b      	RCALL SUBOPT_0xC
                 ;     632  printf("\r");   
0002f5 d250      	RCALL SUBOPT_0x12
                 ;     633  printf("AT+CMGF=1"); 
0002f6 e2e3
0002f7 e0f1      	__POINTW1FN _0,221
0002f8 d244      	RCALL SUBOPT_0xF
                 ;     634  delay_ms(1000);
0002f9 d236      	RCALL SUBOPT_0xC
                 ;     635  printf("\r");
0002fa d24b      	RCALL SUBOPT_0x12
                 ;     636  delay_ms(1000);
0002fb d234      	RCALL SUBOPT_0xC
                 ;     637  printf("AT+CIPSERVER=1,1234"); 
0002fc e2ed
0002fd e0f1      	__POINTW1FN _0,231
0002fe d23e      	RCALL SUBOPT_0xF
                 ;     638  delay_ms(1000);
0002ff d230      	RCALL SUBOPT_0xC
                 ;     639  printf("\n\r");
000300 e4e1
000301 e0f1      	__POINTW1FN _0,251
000302 d23a      	RCALL SUBOPT_0xF
                 ;     640  while(getchar()!='K'); 
                 _0x44:
000303 de31      	RCALL _getchar
000304 34eb      	CPI  R30,LOW(0x4B)
000305 f409      	BRNE PC+2
000306 c001      	RJMP _0x46
000307 cffb      	RJMP _0x44
                 _0x46:
                 ;     641  while(getchar()!='K'); 
                 _0x47:
000308 de2c      	RCALL _getchar
000309 34eb      	CPI  R30,LOW(0x4B)
00030a f409      	BRNE PC+2
00030b c001      	RJMP _0x49
00030c cffb      	RJMP _0x47
                 _0x49:
                 ;     642  delay_ms(300); 
00030d d226      	RCALL SUBOPT_0xD
                 ;     643  printf("at+cifsr");  
00030e e4e4
00030f e0f1      	__POINTW1FN _0,254
000310 d22c      	RCALL SUBOPT_0xF
                 ;     644  delay_ms(1000);
000311 d21e      	RCALL SUBOPT_0xC
                 ;     645  printf("\r");
000312 d233      	RCALL SUBOPT_0x12
                 ;     646  while(getchar()!=0x0A); 
                 _0x4A:
000313 de21      	RCALL _getchar
000314 30ea      	CPI  R30,LOW(0xA)
000315 f409      	BRNE PC+2
000316 c001      	RJMP _0x4C
000317 cffb      	RJMP _0x4A
                 _0x4C:
                 ;     647  clear_lcd();  
000318 d014      	RCALL _clear_lcd
                 ;     648  lcd_cmd(0x80);
000319 d1f7      	RCALL SUBOPT_0x4
                 ;     649  for(i=0;i<16;i++)
00031a 2444      	CLR  R4
                 _0x4E:
00031b e1e0      	LDI  R30,LOW(16)
00031c 164e      	CP   R4,R30
00031d f008      	BRLO PC+2
00031e c00d      	RJMP _0x4F
                 ;     650  {
                 ;     651   ip[i]=getchar();     
00031f d230      	RCALL SUBOPT_0x16
000320 93ff      	PUSH R31
000321 93ef      	PUSH R30
000322 de12      	RCALL _getchar
000323 91af      	POP  R26
000324 91bf      	POP  R27
000325 93ec      	ST   X,R30
                 ;     652   lcd_data(ip[i],1);
000326 d229      	RCALL SUBOPT_0x16
000327 d1f1      	RCALL SUBOPT_0x6
000328 e0e1      	LDI  R30,LOW(1)
000329 d21f      	RCALL SUBOPT_0x13
                 ;     653 //   if(ip[i]==0x0D) 
                 ;     654 //  { 
                 ;     655 //   rlt();
                 ;     656 //   for(i=0;i<16;i++)
                 ;     657 //  {
                 ;     658 //   putchar(ip[i]);
                 ;     659 //  }
                 ;     660 //  printf("\r");
                 ;     661 //   rlt1(); 
                 ;     662 //   delay_ms(1000);
                 ;     663 //   break;
                 ;     664 //  } 
                 ;     665  }  
                 _0x4D:
00032a 9443      	INC  R4
00032b cfef      	RJMP _0x4E
                 _0x4F:
                 ;     666 }
00032c 9508      	RET
                 ;     667  #include <mega48.h> 
                 ;     668   #include <delay.h>         
                 ;     669 //#include <prototype.h> 
                 ;     670 #include <lcd16x1.h> 
                 ;     671 #include <stdlib.h>
                 ;     672 #include <stdio.h>  
                 ;     673 //#include<prototype.h>     
                 ;     674 //#define INT0_PIN PIND.2         //int0 pin PD.2
                 ;     675 //#define INT1_PIN PIND.3         //int1 pin PD.3
                 ;     676 
                 ;     677 #define RS PORTB.0
                 ;     678 #define RW PORTB.1    //lcd defines
                 ;     679 #define EN PORTB.2  
                 ;     680                         
                 ;     681          
                 ;     682 
                 ;     683 //function to clear the lcd & start from first row first column onwards       
                 ;     684 void clear_lcd(void)
                 ;     685 {
                 _clear_lcd:
                 ;     686        lcd_cmd(0x01);
00032d e0e1      	LDI  R30,LOW(1)
00032e d21c      	RCALL SUBOPT_0x14
                 ;     687        //lcd_cmd(0x80);   //clear screen n start from fist line first column
                 ;     688        lcd_cmd(0x06);     //incremental cursor
00032f e0e6      	LDI  R30,LOW(6)
000330 d21a      	RCALL SUBOPT_0x14
                 ;     689 }
000331 9508      	RET
                 ;     690 
                 ;     691 //lcd initialization function for 4 datalines    
                 ;     692  void lcd_init(void)
                 ;     693  {
                 _lcd_init:
                 ;     694         delay_ms(15);               //startup delay
000332 e0ef      	LDI  R30,LOW(15)
000333 e0f0      	LDI  R31,HIGH(15)
000334 d20f      	RCALL SUBOPT_0x11
                 ;     695                   lcd_cmd(0x03);
000335 e0e3      	LDI  R30,LOW(3)
000336 d214      	RCALL SUBOPT_0x14
                 ;     696         delay_ms(5);     
000337 e0e5      	LDI  R30,LOW(5)
000338 e0f0      	LDI  R31,HIGH(5)
000339 d20a      	RCALL SUBOPT_0x11
                 ;     697                   lcd_cmd(0x03);
00033a e0e3      	LDI  R30,LOW(3)
00033b d20f      	RCALL SUBOPT_0x14
                 ;     698         delay_us(160);     
00033c d218      	RCALL SUBOPT_0x17
                 ;     699                   lcd_cmd(0x03);
00033d e0e3      	LDI  R30,LOW(3)
00033e d20c      	RCALL SUBOPT_0x14
                 ;     700         delay_us(160);            
00033f d215      	RCALL SUBOPT_0x17
                 ;     701                   lcd_cmd(0x02);
000340 e0e2      	LDI  R30,LOW(2)
000341 d209      	RCALL SUBOPT_0x14
                 ;     702        delay_us(160);  
000342 d212      	RCALL SUBOPT_0x17
                 ;     703                   lcd_cmd(0x28);         //4 bit data , 5*7, 2 line..   //the abouve cmds are necessary
000343 e2e8      	LDI  R30,LOW(40)
000344 d206      	RCALL SUBOPT_0x14
                 ;     704        delay_ms(100);                    
000345 d207      	RCALL SUBOPT_0x15
                 ;     705                   lcd_cmd(0x60);         // set CGRAM addr
000346 e6e0      	LDI  R30,LOW(96)
000347 d203      	RCALL SUBOPT_0x14
                 ;     706        delay_ms(100);           
000348 d204      	RCALL SUBOPT_0x15
                 ;     707          lcd_cmd(0x0C); 
000349 e0ec      	LDI  R30,LOW(12)
00034a d200      	RCALL SUBOPT_0x14
                 ;     708        delay_ms(1);                          
00034b d20e      	RCALL SUBOPT_0x18
                 ;     709                   lcd_cmd(0x06);       //increment cursor no shift
00034c e0e6      	LDI  R30,LOW(6)
00034d d1fd      	RCALL SUBOPT_0x14
                 ;     710        delay_ms(1);           
00034e d20b      	RCALL SUBOPT_0x18
                 ;     711                   lcd_cmd(0x90);       // 1st column 1st char
00034f e9e0      	LDI  R30,LOW(144)
000350 d1fa      	RCALL SUBOPT_0x14
                 ;     712         delay_ms(1);                                        
000351 d208      	RCALL SUBOPT_0x18
                 ;     713                   lcd_cmd(0x01);       //clear lcd
000352 e0e1      	LDI  R30,LOW(1)
000353 d1f7      	RCALL SUBOPT_0x14
                 ;     714         delay_ms(2);                              
000354 e0e2      	LDI  R30,LOW(2)
000355 e0f0      	LDI  R31,HIGH(2)
000356 d1ed      	RCALL SUBOPT_0x11
                 ;     715   }
000357 9508      	RET
                 ;     716   //to send lcd commands
                 ;     717 void lcd_cmd(unsigned char inst)
                 ;     718 {
                 _lcd_cmd:
                 ;     719 
                 ;     720        unsigned char lsb=0,msb=0;
                 ;     721         lsb=inst&0x0F;        //split msb n lsb nibbles
000358 d284      	RCALL __SAVELOCR2
                 ;	inst -> Y+2
                 ;	lsb -> R16
                 ;	msb -> R17
000359 e000      	LDI  R16,0
00035a e010      	LDI  R17,0
00035b 81ea      	LDD  R30,Y+2
00035c 70ef      	ANDI R30,LOW(0xF)
00035d 2f0e      	MOV  R16,R30
                 ;     722         msb=inst>>4; 
00035e 81ea      	LDD  R30,Y+2
00035f 95e2      	SWAP R30
000360 70ef      	ANDI R30,0xF
000361 2f1e      	MOV  R17,R30
                 ;     723         msb&=0x0F;   
000362 701f      	ANDI R17,LOW(15)
                 ;     724         lsb=lsb&0X0F;
000363 700f      	ANDI R16,LOW(15)
                 ;     725         msb=msb<<4;
000364 9512      	SWAP R17
000365 7f10      	ANDI R17,0xF0
                 ;     726         lsb=lsb<<4;
000366 9502      	SWAP R16
000367 7f00      	ANDI R16,0xF0
                 ;     727         delay_us(500);            //busy check duration       500
000368 ee88
000369 e093
00036a 9701
00036b f7f1      	__DELAY_USW 1000
                 ;     728         RS=0;
00036c 9828      	CBI  0x5,0
                 ;     729         RW=0;    
00036d d1ef      	RCALL SUBOPT_0x19
                 ;     730         EN=1;     
                 ;     731         PORTD&=0x0F; 
                 ;     732         PORTD|=msb; 
                 ;     733         delay_us(5);         //6 nops       changed from 10u to 5u
                 ;     734         EN=0;
                 ;     735         delay_us(5);         //6 nops
                 ;     736         EN=1;
                 ;     737         PORTD&=0x0F;        //sending lsb now       
                 ;     738         PORTD|=lsb; 
                 ;     739         delay_us(5);         //6 nops
                 ;     740         EN=0;
                 ;     741      }   
00036e d275      	RCALL __LOADLOCR2
00036f 9623      	ADIW R28,3
000370 9508      	RET
                 ;     742                
                 ;     743 //function to send data to lcd
                 ;     744  void lcd_data(unsigned char data1,unsigned char type)
                 ;     745  {      
                 _lcd_data:
                 ;     746       unsigned char lsbc,msbc,temp,a; 
                 ;     747       type=a;
000371 d269      	RCALL __SAVELOCR4
                 ;	data1 -> Y+5
                 ;	type -> Y+4
                 ;	lsbc -> R16
                 ;	msbc -> R17
                 ;	temp -> R18
                 ;	a -> R19
000372 833c      	STD  Y+4,R19
                 ;     748       temp=0;lsbc=0;msbc=0;
000373 e020      	LDI  R18,LOW(0)
000374 e000      	LDI  R16,LOW(0)
000375 e010      	LDI  R17,LOW(0)
                 ;     749       msbc=data1&0xF0;      //msb n lsb split
000376 81ed      	LDD  R30,Y+5
000377 7fe0      	ANDI R30,LOW(0xF0)
000378 2f1e      	MOV  R17,R30
                 ;     750       lsbc=data1<<4;
000379 81ed      	LDD  R30,Y+5
00037a 95e2      	SWAP R30
00037b 7fe0      	ANDI R30,0xF0
00037c 2f0e      	MOV  R16,R30
                 ;     751       delay_us(600);            //busy check duration       prev 600
00037d eb80
00037e e094
00037f 9701
000380 f7f1      	__DELAY_USW 1200
                 ;     752       RS=1;
000381 9a28      	SBI  0x5,0
                 ;     753       RW=0;     
000382 d1da      	RCALL SUBOPT_0x19
                 ;     754       EN=1;
                 ;     755       PORTD&=0x0F; 
                 ;     756       PORTD|=msbc;         // this being moved to the lsbbits of port instead of msb...
                 ;     757       delay_us(5);        
                 ;     758       EN=0 ;                   
                 ;     759       delay_us(5);        
                 ;     760       EN=1;
                 ;     761       PORTD&=0x0F;
                 ;     762       PORTD|=lsbc;        
                 ;     763       delay_us(5);        
                 ;     764       EN=0;     
                 ;     765 } 
000383 d25e      	RCALL __LOADLOCR4
000384 9626      	ADIW R28,6
000385 9508      	RET
                 ;     766             
                 ;     767  
                 ;     768 //function to put string onto lcd     
                 ;     769 void lcd_puts(unsigned char *str)
                 ;     770 {
                 _lcd_puts:
                 ;     771   while(*str !='\0') 
                 ;	*str -> Y+0
                 _0x50:
000386 81a8      	LD   R26,Y
000387 81b9      	LDD  R27,Y+1
000388 91ec      	LD   R30,X
000389 30e0      	CPI  R30,0
00038a f409      	BRNE PC+2
00038b c00a      	RJMP _0x52
                 ;     772          {
                 ;     773            lcd_data(*str,1);
00038c d1eb      	RCALL SUBOPT_0x1A
00038d 91ec      	LD   R30,X
00038e 93ea      	ST   -Y,R30
00038f e0e1      	LDI  R30,LOW(1)
000390 d1b8      	RCALL SUBOPT_0x13
                 ;     774              *str++;
000391 d1e6      	RCALL SUBOPT_0x1A
000392 91ed      	LD   R30,X+
000393 83a8      	ST   Y,R26
000394 83b9      	STD  Y+1,R27
                 ;     775           }
000395 cff0      	RJMP _0x50
                 _0x52:
                 ;     776 }
000396 9622      	ADIW R28,2
000397 9508      	RET
                 ;     777 
                 ;     778 
                 ;     779 
                 ;     780 
                 ;     781 //function to convert int to ascii for dispaly on lcd / serial port          
                 ;     782 //  //calculate the ascii values to be displayed on lcd  3 digit int to 3 digit ascii
                 ;     783 // void cal_ascii(unsigned int value)   
                 ;     784 // { 
                 ;     785 //        unsigned char lb,mb,mmlb;
                 ;     786 //        mmlb=(((unsigned char)(value/100))|0x30);
                 ;     787 //        mb=(unsigned char)(value/10);  
                 ;     788 //        mb=(((unsigned char)(mb%10))|0x30);
                 ;     789 //        lb=(((unsigned char)(value%10))|0x30);
                 ;     790 //       
                 ;     791 //       if(value>99){ lcd_data(mmlb,1);lcd_data(mb,1);lcd_data(lb,1); }
                 ;     792 //       else if (value >9){lcd_data(mb,1);lcd_data(lb,1); }
                 ;     793 //       else 
                 ;     794 //       {   
                 ;     795 //       lcd_data(0x30,1);
                 ;     796 //       lcd_data(lb,1); 
                 ;     797 //       }
                 ;     798 // }                       
                 ;     799 
                 ;     800 
                 
                 __put_G5:
000398 d1df      	RCALL SUBOPT_0x1A
000399 d237      	RCALL __GETW1P
00039a 9730      	SBIW R30,0
00039b f409      	BRNE PC+2
00039c c00a      	RJMP _0x53
00039d d1da      	RCALL SUBOPT_0x1A
00039e 91ed      	LD   R30,X+
00039f 91fd      	LD   R31,X+
0003a0 9631      	ADIW R30,1
0003a1 93fe      	ST   -X,R31
0003a2 93ee      	ST   -X,R30
0003a3 9731      	SBIW R30,1
0003a4 81aa      	LDD  R26,Y+2
0003a5 83a0      	STD  Z+0,R26
0003a6 c002      	RJMP _0x54
                 _0x53:
0003a7 81ea      	LDD  R30,Y+2
0003a8 d199      	RCALL SUBOPT_0x10
                 _0x54:
0003a9 9623      	ADIW R28,3
0003aa 9508      	RET
                 __print_G5:
0003ab 9726      	SBIW R28,6
0003ac d22c      	RCALL __SAVELOCR6
0003ad e000      	LDI  R16,0
                 _0x55:
0003ae 89e8      	LDD  R30,Y+16
0003af 89f9      	LDD  R31,Y+16+1
0003b0 9631      	ADIW R30,1
0003b1 8be8      	STD  Y+16,R30
0003b2 8bf9      	STD  Y+16+1,R31
0003b3 9731      	SBIW R30,1
0003b4 91e4      	LPM  R30,Z
0003b5 2f3e      	MOV  R19,R30
0003b6 30e0      	CPI  R30,0
0003b7 f409      	BRNE PC+2
0003b8 c12b      	RJMP _0x57
0003b9 2fe0      	MOV  R30,R16
0003ba 30e0      	CPI  R30,0
0003bb f009      	BREQ PC+2
0003bc c007      	RJMP _0x5B
0003bd 3235      	CPI  R19,37
0003be f009      	BREQ PC+2
0003bf c002      	RJMP _0x5C
0003c0 e001      	LDI  R16,LOW(1)
0003c1 c001      	RJMP _0x5D
                 _0x5C:
0003c2 d1b8      	RCALL SUBOPT_0x1B
                 _0x5D:
0003c3 c11f      	RJMP _0x5A
                 _0x5B:
0003c4 30e1      	CPI  R30,LOW(0x1)
0003c5 f009      	BREQ PC+2
0003c6 c019      	RJMP _0x5E
0003c7 3235      	CPI  R19,37
0003c8 f009      	BREQ PC+2
0003c9 c003      	RJMP _0x5F
0003ca d1b0      	RCALL SUBOPT_0x1B
0003cb e000      	LDI  R16,LOW(0)
0003cc c116      	RJMP _0x5A
                 _0x5F:
0003cd e002      	LDI  R16,LOW(2)
0003ce e050      	LDI  R21,LOW(0)
0003cf e010      	LDI  R17,LOW(0)
0003d0 323d      	CPI  R19,45
0003d1 f009      	BREQ PC+2
0003d2 c002      	RJMP _0x60
0003d3 e011      	LDI  R17,LOW(1)
0003d4 c10e      	RJMP _0x5A
                 _0x60:
0003d5 323b      	CPI  R19,43
0003d6 f009      	BREQ PC+2
0003d7 c002      	RJMP _0x61
0003d8 e25b      	LDI  R21,LOW(43)
0003d9 c109      	RJMP _0x5A
                 _0x61:
0003da 3230      	CPI  R19,32
0003db f009      	BREQ PC+2
0003dc c002      	RJMP _0x62
0003dd e250      	LDI  R21,LOW(32)
0003de c104      	RJMP _0x5A
                 _0x62:
0003df c003      	RJMP _0x63
                 _0x5E:
0003e0 30e2      	CPI  R30,LOW(0x2)
0003e1 f009      	BREQ PC+2
0003e2 c008      	RJMP _0x64
                 _0x63:
0003e3 e040      	LDI  R20,LOW(0)
0003e4 e003      	LDI  R16,LOW(3)
0003e5 3330      	CPI  R19,48
0003e6 f009      	BREQ PC+2
0003e7 c002      	RJMP _0x65
0003e8 6810      	ORI  R17,LOW(128)
0003e9 c0f9      	RJMP _0x5A
                 _0x65:
0003ea c003      	RJMP _0x66
                 _0x64:
0003eb 30e3      	CPI  R30,LOW(0x3)
0003ec f009      	BREQ PC+2
0003ed c0f5      	RJMP _0x5A
                 _0x66:
0003ee 3330      	CPI  R19,48
0003ef f408      	BRSH PC+2
0003f0 c004      	RJMP _0x69
0003f1 333a      	CPI  R19,58
0003f2 f008      	BRLO PC+2
0003f3 c001      	RJMP _0x69
0003f4 c001      	RJMP _0x6A
                 _0x69:
0003f5 c009      	RJMP _0x68
                 _0x6A:
0003f6 2fa4      	MOV  R26,R20
0003f7 e0ea      	LDI  R30,LOW(10)
0003f8 9fea      	MUL  R30,R26
0003f9 01f0      	MOVW R30,R0
0003fa 2f4e      	MOV  R20,R30
0003fb 2fe3      	MOV  R30,R19
0003fc 53e0      	SUBI R30,LOW(48)
0003fd 0f4e      	ADD  R20,R30
0003fe c0e4      	RJMP _0x5A
                 _0x68:
0003ff 2fe3      	MOV  R30,R19
000400 36e3      	CPI  R30,LOW(0x63)
000401 f009      	BREQ PC+2
000402 c005      	RJMP _0x6E
000403 d17c      	RCALL SUBOPT_0x1C
000404 91ec      	LD   R30,X
000405 d181      	RCALL SUBOPT_0x1D
000406 c0db      	RJMP _0x6F
000407 c003      	RJMP _0x70
                 _0x6E:
000408 37e3      	CPI  R30,LOW(0x73)
000409 f009      	BREQ PC+2
00040a c006      	RJMP _0x71
                 _0x70:
00040b d174      	RCALL SUBOPT_0x1C
00040c d17f      	RCALL SUBOPT_0x1E
00040d d19a      	RCALL _strlen
00040e 2f0e      	MOV  R16,R30
00040f c009      	RJMP _0x72
000410 c003      	RJMP _0x73
                 _0x71:
000411 37e0      	CPI  R30,LOW(0x70)
000412 f009      	BREQ PC+2
000413 c00a      	RJMP _0x74
                 _0x73:
000414 d16b      	RCALL SUBOPT_0x1C
000415 d176      	RCALL SUBOPT_0x1E
000416 d19b      	RCALL _strlenf
000417 2f0e      	MOV  R16,R30
000418 6018      	ORI  R17,LOW(8)
                 _0x72:
000419 6012      	ORI  R17,LOW(2)
00041a 771f      	ANDI R17,LOW(127)
00041b e020      	LDI  R18,LOW(0)
00041c c038      	RJMP _0x75
00041d c003      	RJMP _0x76
                 _0x74:
00041e 36e4      	CPI  R30,LOW(0x64)
00041f f009      	BREQ PC+2
000420 c001      	RJMP _0x77
                 _0x76:
000421 c003      	RJMP _0x78
                 _0x77:
000422 36e9      	CPI  R30,LOW(0x69)
000423 f009      	BREQ PC+2
000424 c002      	RJMP _0x79
                 _0x78:
000425 6014      	ORI  R17,LOW(4)
000426 c003      	RJMP _0x7A
                 _0x79:
000427 37e5      	CPI  R30,LOW(0x75)
000428 f009      	BREQ PC+2
000429 c006      	RJMP _0x7B
                 _0x7A:
00042a e3e4      	LDI  R30,LOW(_tbl10_G5*2)
00042b e0f0      	LDI  R31,HIGH(_tbl10_G5*2)
00042c d163      	RCALL SUBOPT_0x1F
00042d e005      	LDI  R16,LOW(5)
00042e c00d      	RJMP _0x7C
00042f c003      	RJMP _0x7D
                 _0x7B:
000430 35e8      	CPI  R30,LOW(0x58)
000431 f009      	BREQ PC+2
000432 c002      	RJMP _0x7E
                 _0x7D:
000433 6018      	ORI  R17,LOW(8)
000434 c003      	RJMP _0x7F
                 _0x7E:
000435 37e8      	CPI  R30,LOW(0x78)
000436 f009      	BREQ PC+2
000437 c0aa      	RJMP _0xB0
                 _0x7F:
000438 e3ee      	LDI  R30,LOW(_tbl16_G5*2)
000439 e0f0      	LDI  R31,HIGH(_tbl16_G5*2)
00043a d155      	RCALL SUBOPT_0x1F
00043b e004      	LDI  R16,LOW(4)
                 _0x7C:
00043c ff12      	SBRS R17,2
00043d c014      	RJMP _0x81
00043e d141      	RCALL SUBOPT_0x1C
00043f d191      	RCALL __GETW1P
000440 d152      	RCALL SUBOPT_0x20
000441 85aa      	LDD  R26,Y+10
000442 85bb      	LDD  R27,Y+10+1
000443 9710      	SBIW R26,0
000444 f00c      	BRLT PC+2
000445 c005      	RJMP _0x82
000446 85ea      	LDD  R30,Y+10
000447 85fb      	LDD  R31,Y+10+1
000448 d184      	RCALL __ANEGW1
000449 d149      	RCALL SUBOPT_0x20
00044a e25d      	LDI  R21,LOW(45)
                 _0x82:
00044b 3050      	CPI  R21,0
00044c f409      	BRNE PC+2
00044d c002      	RJMP _0x83
00044e 5f0f      	SUBI R16,-LOW(1)
00044f c001      	RJMP _0x84
                 _0x83:
000450 7f1b      	ANDI R17,LOW(251)
                 _0x84:
000451 c003      	RJMP _0x85
                 _0x81:
000452 d12d      	RCALL SUBOPT_0x1C
000453 d17d      	RCALL __GETW1P
000454 d13e      	RCALL SUBOPT_0x20
                 _0x85:
                 _0x75:
000455 fd10      	SBRC R17,0
000456 c011      	RJMP _0x86
                 _0x87:
000457 1704      	CP   R16,R20
000458 f008      	BRLO PC+2
000459 c00e      	RJMP _0x89
00045a ff17      	SBRS R17,7
00045b c008      	RJMP _0x8A
00045c ff12      	SBRS R17,2
00045d c004      	RJMP _0x8B
00045e 7f1b      	ANDI R17,LOW(251)
00045f 2f35      	MOV  R19,R21
000460 5001      	SUBI R16,LOW(1)
000461 c001      	RJMP _0x8C
                 _0x8B:
000462 e330      	LDI  R19,LOW(48)
                 _0x8C:
000463 c001      	RJMP _0x8D
                 _0x8A:
000464 e230      	LDI  R19,LOW(32)
                 _0x8D:
000465 d115      	RCALL SUBOPT_0x1B
000466 5041      	SUBI R20,LOW(1)
000467 cfef      	RJMP _0x87
                 _0x89:
                 _0x86:
000468 2f20      	MOV  R18,R16
000469 ff11      	SBRS R17,1
00046a c01a      	RJMP _0x8E
                 _0x8F:
00046b 3020      	CPI  R18,0
00046c f409      	BRNE PC+2
00046d c016      	RJMP _0x91
00046e ff13      	SBRS R17,3
00046f c008      	RJMP _0x92
000470 81ee      	LDD  R30,Y+6
000471 81ff      	LDD  R31,Y+6+1
000472 9631      	ADIW R30,1
000473 d11c      	RCALL SUBOPT_0x1F
000474 9731      	SBIW R30,1
000475 91e4      	LPM  R30,Z
000476 d110      	RCALL SUBOPT_0x1D
000477 c006      	RJMP _0x93
                 _0x92:
000478 81ae      	LDD  R26,Y+6
000479 81bf      	LDD  R27,Y+6+1
00047a 91ed      	LD   R30,X+
00047b 83ae      	STD  Y+6,R26
00047c 83bf      	STD  Y+6+1,R27
00047d d109      	RCALL SUBOPT_0x1D
                 _0x93:
00047e 3040      	CPI  R20,0
00047f f409      	BRNE PC+2
000480 c001      	RJMP _0x94
000481 5041      	SUBI R20,LOW(1)
                 _0x94:
000482 5021      	SUBI R18,LOW(1)
000483 cfe7      	RJMP _0x8F
                 _0x91:
000484 c054      	RJMP _0x95
                 _0x8E:
                 _0x97:
000485 e330      	LDI  R19,LOW(48)
000486 81ee      	LDD  R30,Y+6
000487 81ff      	LDD  R31,Y+6+1
000488 9632      	ADIW R30,2
000489 d106      	RCALL SUBOPT_0x1F
00048a 9732      	SBIW R30,2
00048b d149      	RCALL __GETW1PF
00048c 87e8      	STD  Y+8,R30
00048d 87f9      	STD  Y+8+1,R31
                 _0x99:
00048e 85e8      	LDD  R30,Y+8
00048f 85f9      	LDD  R31,Y+8+1
000490 85aa      	LDD  R26,Y+10
000491 85bb      	LDD  R27,Y+10+1
000492 17ae      	CP   R26,R30
000493 07bf      	CPC  R27,R31
000494 f408      	BRSH PC+2
000495 c009      	RJMP _0x9B
000496 5f3f      	SUBI R19,-LOW(1)
000497 85a8      	LDD  R26,Y+8
000498 85b9      	LDD  R27,Y+8+1
000499 85ea      	LDD  R30,Y+10
00049a 85fb      	LDD  R31,Y+10+1
00049b 1bea      	SUB  R30,R26
00049c 0bfb      	SBC  R31,R27
00049d d0f5      	RCALL SUBOPT_0x20
00049e cfef      	RJMP _0x99
                 _0x9B:
00049f 333a      	CPI  R19,58
0004a0 f408      	BRSH PC+2
0004a1 c005      	RJMP _0x9C
0004a2 ff13      	SBRS R17,3
0004a3 c002      	RJMP _0x9D
0004a4 5f39      	SUBI R19,-LOW(7)
0004a5 c001      	RJMP _0x9E
                 _0x9D:
0004a6 5d39      	SUBI R19,-LOW(39)
                 _0x9E:
                 _0x9C:
0004a7 ff14      	SBRS R17,4
0004a8 c001      	RJMP _0x9F
0004a9 c023      	RJMP _0xA0
                 _0x9F:
0004aa 3331      	CPI  R19,49
0004ab f008      	BRLO PC+2
0004ac c006      	RJMP _0xA2
0004ad 85a8      	LDD  R26,Y+8
0004ae 85b9      	LDD  R27,Y+8+1
0004af 9711      	SBIW R26,1
0004b0 f409      	BRNE PC+2
0004b1 c001      	RJMP _0xA2
0004b2 c002      	RJMP _0xA1
                 _0xA2:
0004b3 6110      	ORI  R17,LOW(16)
0004b4 c00c      	RJMP _0xA4
                 _0xA1:
0004b5 1742      	CP   R20,R18
0004b6 f408      	BRSH PC+2
0004b7 c003      	RJMP _0xA6
0004b8 fd10      	SBRC R17,0
0004b9 c001      	RJMP _0xA6
0004ba c001      	RJMP _0xA7
                 _0xA6:
0004bb c016      	RJMP _0xA5
                 _0xA7:
0004bc e230      	LDI  R19,LOW(32)
0004bd ff17      	SBRS R17,7
0004be c00e      	RJMP _0xA8
0004bf e330      	LDI  R19,LOW(48)
0004c0 6110      	ORI  R17,LOW(16)
                 _0xA4:
0004c1 ff12      	SBRS R17,2
0004c2 c00a      	RJMP _0xA9
0004c3 7f1b      	ANDI R17,LOW(251)
0004c4 935a      	ST   -Y,R21
0004c5 85ed      	LDD  R30,Y+13
0004c6 85fe      	LDD  R31,Y+13+1
0004c7 d059      	RCALL SUBOPT_0x8
0004c8 decf      	RCALL __put_G5
0004c9 3040      	CPI  R20,0
0004ca f409      	BRNE PC+2
0004cb c001      	RJMP _0xAA
0004cc 5041      	SUBI R20,LOW(1)
                 _0xAA:
                 _0xA9:
                 _0xA8:
                 _0xA0:
0004cd d0ad      	RCALL SUBOPT_0x1B
0004ce 3040      	CPI  R20,0
0004cf f409      	BRNE PC+2
0004d0 c001      	RJMP _0xAB
0004d1 5041      	SUBI R20,LOW(1)
                 _0xAB:
                 _0xA5:
0004d2 5021      	SUBI R18,LOW(1)
                 _0x96:
0004d3 85a8      	LDD  R26,Y+8
0004d4 85b9      	LDD  R27,Y+8+1
0004d5 9712      	SBIW R26,2
0004d6 f408      	BRSH PC+2
0004d7 c001      	RJMP _0x98
0004d8 cfac      	RJMP _0x97
                 _0x98:
                 _0x95:
0004d9 ff10      	SBRS R17,0
0004da c007      	RJMP _0xAC
                 _0xAD:
0004db 3040      	CPI  R20,0
0004dc f409      	BRNE PC+2
0004dd c004      	RJMP _0xAF
0004de 5041      	SUBI R20,LOW(1)
0004df e2e0      	LDI  R30,LOW(32)
0004e0 d0a6      	RCALL SUBOPT_0x1D
0004e1 cff9      	RJMP _0xAD
                 _0xAF:
                 _0xAC:
                 _0xB0:
                 _0x6F:
0004e2 e000      	LDI  R16,LOW(0)
                 _0x6D:
                 _0x5A:
0004e3 ceca      	RJMP _0x55
                 _0x57:
0004e4 d0fb      	RCALL __LOADLOCR6
0004e5 9662      	ADIW R28,18
0004e6 9508      	RET
                 _printf:
0004e7 92ff      	PUSH R15
0004e8 2ef8      	MOV  R15,R24
0004e9 9722      	SBIW R28,2
0004ea d0f2      	RCALL __SAVELOCR2
0004eb 01de      	MOVW R26,R28
0004ec d0dc      	RCALL __ADDW2R15
0004ed 018d      	MOVW R16,R26
0004ee e0e0      	LDI  R30,0
0004ef 83ea      	STD  Y+2,R30
0004f0 83eb      	STD  Y+2+1,R30
0004f1 01de      	MOVW R26,R28
0004f2 9614      	ADIW R26,4
0004f3 d0d5      	RCALL __ADDW2R15
0004f4 d0dc      	RCALL __GETW1P
0004f5 d02b      	RCALL SUBOPT_0x8
0004f6 931a      	ST   -Y,R17
0004f7 930a      	ST   -Y,R16
0004f8 01fe      	MOVW R30,R28
0004f9 9636      	ADIW R30,6
0004fa d026      	RCALL SUBOPT_0x8
0004fb deaf      	RCALL __print_G5
0004fc d0e7      	RCALL __LOADLOCR2
0004fd 9624      	ADIW R28,4
0004fe 90ff      	POP  R15
0004ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:32 WORDS
                 SUBOPT_0x0:
000500 e0f0      	LDI  R31,0
000501 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1:
000502 de2a      	RCALL _clear_lcd
000503 de2e      	RCALL _lcd_init
000504 e8e0      	LDI  R30,LOW(128)
000505 93ea      	ST   -Y,R30
000506 ce51      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000507 e2e6      	LDI  R30,LOW(_cmd12)
000508 e0f2      	LDI  R31,HIGH(_cmd12)
000509 93fa      	ST   -Y,R31
00050a 93ea      	ST   -Y,R30
00050b ce7a      	RJMP _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3:
00050c e8e8      	LDI  R30,LOW(5000)
00050d e1f3      	LDI  R31,HIGH(5000)
00050e 93fa      	ST   -Y,R31
00050f 93ea      	ST   -Y,R30
000510 c0ac      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000511 e8e0      	LDI  R30,LOW(128)
000512 93ea      	ST   -Y,R30
000513 ce44      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000514 2de4      	MOV  R30,R4
000515 dfea      	RCALL SUBOPT_0x0
000516 5be4      	SUBI R30,LOW(-_cmp)
000517 4ffd      	SBCI R31,HIGH(-_cmp)
000518 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000519 81e0      	LD   R30,Z
00051a 93ea      	ST   -Y,R30
00051b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
00051c e4ec      	LDI  R30,LOW(_cmp)
00051d e0f2      	LDI  R31,HIGH(_cmp)
00051e 93fa      	ST   -Y,R31
00051f 93ea      	ST   -Y,R30
000520 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 82 TIMES, CODE SIZE REDUCTION:79 WORDS
                 SUBOPT_0x8:
000521 93fa      	ST   -Y,R31
000522 93ea      	ST   -Y,R30
000523 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000524 d071      	RCALL _strcmp
000525 30e0      	CPI  R30,0
000526 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xA:
000527 dff9      	RCALL SUBOPT_0x8
000528 de5d      	RCALL _lcd_puts
000529 eee8      	LDI  R30,LOW(1000)
00052a e0f3      	LDI  R31,HIGH(1000)
00052b dff5      	RCALL SUBOPT_0x8
00052c d090      	RCALL _delay_ms
00052d cced      	RJMP _gps
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00052e dff2      	RCALL SUBOPT_0x8
00052f cff4      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0xC:
000530 eee8      	LDI  R30,LOW(1000)
000531 e0f3      	LDI  R31,HIGH(1000)
000532 dfee      	RCALL SUBOPT_0x8
000533 c089      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xD:
000534 e2ec      	LDI  R30,LOW(300)
000535 e0f1      	LDI  R31,HIGH(300)
000536 dfea      	RCALL SUBOPT_0x8
000537 c085      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xE:
000538 2de5      	MOV  R30,R5
000539 dfc6      	RCALL SUBOPT_0x0
00053a 5ae8      	SUBI R30,LOW(-_buff)
00053b 4ffd      	SBCI R31,HIGH(-_buff)
00053c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0xF:
00053d dfe3      	RCALL SUBOPT_0x8
00053e e080      	LDI  R24,0
00053f dfa7      	RCALL _printf
000540 9622      	ADIW R28,2
000541 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000542 93ea      	ST   -Y,R30
000543 cc21      	RJMP _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x11:
000544 dfdc      	RCALL SUBOPT_0x8
000545 c077      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
000546 ede3
000547 e0f0      	__POINTW1FN _0,141
000548 cff4      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000549 93ea      	ST   -Y,R30
00054a ce26      	RJMP _lcd_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x14:
00054b 93ea      	ST   -Y,R30
00054c ce0b      	RJMP _lcd_cmd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
00054d e6e4      	LDI  R30,LOW(100)
00054e e0f0      	LDI  R31,HIGH(100)
00054f cff4      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000550 2de4      	MOV  R30,R4
000551 dfae      	RCALL SUBOPT_0x0
000552 51ef      	SUBI R30,LOW(-_ip)
000553 4ffe      	SBCI R31,HIGH(-_ip)
000554 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x17:
000555 e480
000556 e091
000557 9701
000558 f7f1      	__DELAY_USW 320
000559 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
00055a e0e1      	LDI  R30,LOW(1)
00055b e0f0      	LDI  R31,HIGH(1)
00055c cfe7      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x19:
00055d 9829      	CBI  0x5,1
00055e 9a2a      	SBI  0x5,2
00055f b1eb      	IN   R30,0xB
000560 70ef      	ANDI R30,LOW(0xF)
000561 b9eb      	OUT  0xB,R30
000562 b1eb      	IN   R30,0xB
000563 2be1      	OR   R30,R17
000564 b9eb      	OUT  0xB,R30
000565 e08d
000566 958a
000567 f7f1      	__DELAY_USB 13
000568 982a      	CBI  0x5,2
000569 e08d
00056a 958a
00056b f7f1      	__DELAY_USB 13
00056c 9a2a      	SBI  0x5,2
00056d b1eb      	IN   R30,0xB
00056e 70ef      	ANDI R30,LOW(0xF)
00056f b9eb      	OUT  0xB,R30
000570 b1eb      	IN   R30,0xB
000571 2be0      	OR   R30,R16
000572 b9eb      	OUT  0xB,R30
000573 e08d
000574 958a
000575 f7f1      	__DELAY_USB 13
000576 982a      	CBI  0x5,2
000577 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000578 81a8      	LD   R26,Y
000579 81b9      	LDD  R27,Y+1
00057a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1B:
00057b 933a      	ST   -Y,R19
00057c 85ed      	LDD  R30,Y+13
00057d 85fe      	LDD  R31,Y+13+1
00057e dfa2      	RCALL SUBOPT_0x8
00057f ce18      	RJMP __put_G5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1C:
000580 85ae      	LDD  R26,Y+14
000581 85bf      	LDD  R27,Y+14+1
000582 9714      	SBIW R26,4
000583 87ae      	STD  Y+14,R26
000584 87bf      	STD  Y+14+1,R27
000585 9614      	ADIW R26,4
000586 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1D:
000587 93ea      	ST   -Y,R30
000588 85ed      	LDD  R30,Y+13
000589 85fe      	LDD  R31,Y+13+1
00058a df96      	RCALL SUBOPT_0x8
00058b ce0c      	RJMP __put_G5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
00058c d044      	RCALL __GETW1P
00058d 83ee      	STD  Y+6,R30
00058e 83ff      	STD  Y+6+1,R31
00058f cf91      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000590 83ee      	STD  Y+6,R30
000591 83ff      	STD  Y+6+1,R31
000592 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000593 87ea      	STD  Y+10,R30
000594 87fb      	STD  Y+10+1,R31
000595 9508      	RET
                 
                 _strcmp:
000596 91e9      	ld   r30,y+
000597 91f9      	ld   r31,y+
000598 91a9      	ld   r26,y+
000599 91b9      	ld   r27,y+
                 __strcmp0:
00059a 916d      	ld   r22,x+
00059b 9171      	ld   r23,z+
00059c 1767      	cp   r22,r23
00059d f421      	brne __strcmp1
00059e 2366      	tst  r22
00059f f7d1      	brne __strcmp0
                 __strcmp3:
0005a0 27ee      	clr  r30
0005a1 9508      	ret
                 __strcmp1:
0005a2 1b67      	sub  r22,r23
0005a3 f3e1      	breq __strcmp3
0005a4 e0e1      	ldi  r30,1
0005a5 f408      	brcc __strcmp2
0005a6 50e2      	subi r30,2
                 __strcmp2:
0005a7 9508      	ret
                 
                 _strlen:
0005a8 91a9      	ld   r26,y+
0005a9 91b9      	ld   r27,y+
0005aa 27ee      	clr  r30
0005ab 27ff      	clr  r31
                 __strlen0:
0005ac 916d      	ld   r22,x+
0005ad 2366      	tst  r22
0005ae f011      	breq __strlen1
0005af 9631      	adiw r30,1
0005b0 cffb      	rjmp __strlen0
                 __strlen1:
0005b1 9508      	ret
                 
                 _strlenf:
0005b2 27aa      	clr  r26
0005b3 27bb      	clr  r27
0005b4 91e9      	ld   r30,y+
0005b5 91f9      	ld   r31,y+
                 __strlenf0:
0005b6 9005      	lpm  r0,z+
0005b7 2000      	tst  r0
0005b8 f011      	breq __strlenf1
0005b9 9611      	adiw r26,1
0005ba cffb      	rjmp __strlenf0
                 __strlenf1:
0005bb 01fd      	movw r30,r26
0005bc 9508      	ret
                 
                 _delay_ms:
0005bd 91e9      	ld   r30,y+
0005be 91f9      	ld   r31,y+
0005bf 9630      	adiw r30,0
0005c0 f039      	breq __delay_ms1
                 __delay_ms0:
0005c1 ed80
0005c2 e097
0005c3 9701
0005c4 f7f1      	__DELAY_USW 0x7D0
0005c5 95a8      	wdr
0005c6 9731      	sbiw r30,1
0005c7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005c8 9508      	ret
                 
                 __ADDW2R15:
0005c9 2400      	CLR  R0
0005ca 0daf      	ADD  R26,R15
0005cb 1db0      	ADC  R27,R0
0005cc 9508      	RET
                 
                 __ANEGW1:
0005cd 95e0      	COM  R30
0005ce 95f0      	COM  R31
0005cf 9631      	ADIW R30,1
0005d0 9508      	RET
                 
                 __GETW1P:
0005d1 91ed      	LD   R30,X+
0005d2 91fc      	LD   R31,X
0005d3 9711      	SBIW R26,1
0005d4 9508      	RET
                 
                 __GETW1PF:
0005d5 9005      	LPM  R0,Z+
0005d6 91f4      	LPM  R31,Z
0005d7 2de0      	MOV  R30,R0
0005d8 9508      	RET
                 
                 __SAVELOCR6:
0005d9 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005da 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005db 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005dc 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005dd 931a      	ST   -Y,R17
0005de 930a      	ST   -Y,R16
0005df 9508      	RET
                 
                 __LOADLOCR6:
0005e0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005e1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005e2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005e3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005e4 8119      	LDD  R17,Y+1
0005e5 8108      	LD   R16,Y
0005e6 9508      	RET
                 
                 __LOADLOCR2P:
0005e7 9109      	LD   R16,Y+
0005e8 9119      	LD   R17,Y+
0005e9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :  11 r5 :  18 r6 :   0 r7 :   4 
r8 :   4 r9 :   7 r10:   4 r11:   4 r12:   5 r13:   0 r14:   2 r15:   4 
r16:  34 r17:  39 r18:   9 r19:  26 r20:  17 r21:   9 r22:   8 r23:   3 
r24:  23 r25:   6 r26:  53 r27:  31 r28:  14 r29:   1 r30: 346 r31:  91 
x  :  23 y  : 123 z  :  20 
Registers used: 31 out of 35 (88.6%)

ATmega48 instruction use summary:
adc   :   1 add   :   2 adiw  :  19 and   :   0 andi  :  16 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 
break :   0 breq  :  37 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  13 brlt  :   1 brmi  :   0 brne  :  31 brpl  :   0 
brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :   7 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 
cln   :   0 clr   :  20 cls   :   0 clt   :   0 clv   :   0 clz   :   0 
com   :   2 cp    :  21 cpc   :   1 cpi   :  36 cpse  :   0 dec   :   6 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :  14 ld    :  42 ldd   :  45 ldi   : 211 lds   :   3 
lpm   :  12 lsl   :   0 lsr   :   0 mov   :  28 movw  :  10 mul   :   1 
muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 ori   :   7 
out   :  22 pop   :   9 push  :   9 rcall : 235 ret   :  41 reti  :   2 
rjmp  : 196 rol   :   0 ror   :   0 sbc   :   1 sbci  :   9 sbi   :   9 
sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 sbrs  :  10 
sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 ses   :   0 
set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  47 
std   :  20 sts   :  23 sub   :   3 subi  :  23 swap  :   4 tst   :   6 
wdr   :   2 
Instructions used: 53 out of 109 (48.6%)

ATmega48 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bd4   2654    374   3028    4096  73.9%
[.dseg] 0x000100 0x000271      0    241    241     512  47.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 13 warnings
